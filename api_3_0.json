{
  "openapi": "3.0.0",
  "info": {
    "title": "Leegality Documentation Gateway",
    "description": "Welcome to the reference for the Leegality REST API \nIntegrate with our eSigning Gateway using our REST API resources.\n\nYou can use our API for creating and deleting Signing invitations; for fetching Documents, Audit Trails and other details for existing invitations; and for searching documents based on your custom query. Behind our API calls are layers of secure channeling to ensure that your data is processed in a safe and secure manner.  The API is based on REST principles, and is a JSON-backed interface.\n## What’s New in our eSigning Gateway ?\n\n  **Introducing The New Workflow:**\n  \n  A signing journey consists of a combination of configurations: Template used, Contracting Features used, Signature types permitted, Signature Verification settings, Automation Settings, Signing Invite Customisations etc. \n  \n  Earlier, each API call used to manually pass the all the various configurations for every signing request.  \n\n  We have changed this: Now, the various configurations for a Workflow are set and saved by the user in the Dashboard. The API call for executing the workflow only requires the user to pass three variables. With this New Workflow, we will fetch your configuration details for you from how you have saved them in the Dashboard. \n\n  Therefore, no more heavy requests to our API :)\n\n\n\n## Integration Flow\nIn terms of the flow-\n\n1. The first step to create a Sign Invitation is by creating a Workflow in your dashboard. \n\n    a. You can create one by selecting Workflow option under My Drawer section on your dashboard.\n    \n    b. After selecting the Workflow option you can add a Workflow profile by selecting “New Workflow Profile” option, and then giving the profile a name, after this you can upload a PDF or use a template according to your choice,\n    \n    c. In case you want to use a Stamp Paper for the profile, you need to select the relevant Stamp Series ID. Please note that you need to pre-purchase a particular number of Stamps to be able to use this functionality.\n    \n    d. Post this, you can add any number of signers to the workflow profile. A signer is called an invitee. By default, a signer order is assigned to the request as per which the invitations of subsequent invitees are only activated on successful eSigning by the previous invitees. You can also deactivate Signing order if your use case so requires.\n    \n    e. Once you have configured Signature type and other options for all the invitees with their custom configurations (if any), you can proceed to the next stage,\n    \n    f. Here, you can set custom appearances for the signatures using the set appearances option and can configure the same for each invitee and assign custom coordinates for them.\n    \n    g. Once appearances are set you’re good to go. Click on save to create the workflow profile. Once this is done, check the status of the workflow, it should be in a Published state to be able to use.\n    \n2. The next step is to create a Sign Invitation by making a POST   call to\n    the Create API from your back-end server.      \n\n    a.One Sign Invitation can be used to get a single PDF file eSigned.\n\n    b. You need to provide the profile ID of the Workflow created in the previous step.\n\n    c. You need to mandatorily pass the Name, email and/or phone number of the invitee to create an invitation for the invitee.\n\n    d. If you’re using a PDF type Workflow, you also need to pass the PDF file to be signed in a Base64 format. Or, if you’re using a Template type Workflow and you have fillable fields, you can download the fields using the “Download Form Fields” option available on the dashboard.\n\n2. In response to a successful call in the previous step, you will receive a Document ID and Signing URL in reponse.\n\n    Signing URL is a unique user-specific URL created for every request. The user can sign the document from this URL. You have various ways of sending the user to this URL to eSign the document.    \n\n    a. You can use our Front-end Web and Mobile SDKs to open the URL from within your application.\n\n    b. You can redirect the user to the URL and have him redirected back to the redirection URL set by you on completion or error.\n\n    c. You can set that the URLs created be automatically sent to their email/phone to complete the process outside your application.\n3. On successful signing, a notification with the updated document is sent to the Success Webhook set by you for every particular invitee. In case of error, the notification is sent to a separate Error Webhook provided by you.\n\n    Alternatively, you can also make a GET call to the Details API with the relvant Document ID to check the status of the invitation and/or to fetch the document.    \n\n    a. Once a document is successfully signed by all assigned invitees, it is considered as completed and an audit trail is generated for the particular document. The Audit Trail is sent to the success Webhook on successful signing by the last invitee, and can also alternatively be fetched by calling the Details API once the document has been completed.    \n\n    b. Completed documents are also saved in your Dashboard by default. By enforcing the Delete on Complete functionality from the Dashboard or while create the Signing Request , you can program the documents to automatically get deleted from your Dashboard after 7 days of completion.    \n\n    c.  A URL of the signed document is also sent to all the signers by default for them to view, download or delete the signed document. In case, Delete on Complete functionality is turned on, the URL automatically expires after 7 days of completion unless express saved by the user in his Leegality Account.\n    \n## Account Authentication\n1. You need to obtain an “Auth Token” from the API Settings Tab from your Leegality dashboard to be able to interact with our API.\n2. You can also optionally whitelist the IPs from where you want to interact with our APIs. The same can be done from the API Settings Tab as well. It is highly recommended that you do so before going live.\n3. To verify Webhook calls, you can verify the value of the MAC key in Webhook calls. The value of mac is calculated by applying HMAC-SHA1 algorithm on documentId with your Private Salt provided in your API Settings Tab. You can use it to ensure that the calls are coming from our servers.\n## Types of eSign\n1. Personal, Basic and Essential Plan customers can use Aadhaar eSign (OTP and Biometric), and VirtualSign.\n2. Business, Corporate and Enterprise Plan customers in addition can use DSC, Automated Virtual Signer and DocSigner or HSM Signer.\n\n   ### Aadhaar eSign\n   \n    Aadhaar eSign is an Aadhaar authentication based digital signature which can be carried out using the Aadhaar OTP or Aadhaar Biometric verification method. For Aadhaar biometric, you need to procure a Aadhaar registered Biometric Device. The same can be either used from a Windows PC or a Android Device (using our Android Biometric SDK)\n    \n   ### Virtual Sign \n    \n    Virtual Sign is an Mobile/Email OTP based authentication for approval of a document.\n\n   ### DSC \n   \n    DSC is a USB-dongle based technique of digitally signing a document. The signer needs to install Leegality's USB Signing Utility in their PC and need to possess a USB Dongle with a valid Digital Signature Certificate issued by a Certifying Authority.\n\n   ### Document Signer Certificate \n   \n    Document Signer Certificate is a certificate issued to an Organisation for server based signing of documents. To use the same, you need to place a validly issued Document Signer Certificate on your server along with Leegality's Document Signer Utility, and then configure the same from your Dashboard.\n    \n   ### Automated Signer \n   \n    Automated Signing can be carried out either using a Document Signer Certificate or a Virtual Signature pre-configured with any user in your organisational account with Leegality.\n    \n   ### NeSL eSign \n   \n    NeSL eSign is an Aadhaar authentication based digital signature carried out through an Information Utility (NeSL).  Documents signed using NeSL are automatically submitted to NeSL.  NeSL eSign can only be used for debt related documentation.\n    \n   ### Cloud DSC\n   \n    Cloud DSC is a digital signature that can be used after a one time KYC authentication process using a PAN Card or Aadhaar XML.   Cloud DSC does not require the hardware token that is used in the traditional DSC.  Cloud DSC is referred to in the API documentation as OFFLINE_SIGN.\n\n## Branding\n  \n1. You can update your organisation’s name under ‘Branding Name’ in your Settings Page to be used in email and phone communication to your users.\n2. Essential and above plans can also upload their own Organisational Logo under ‘Branding Logo’ in their Settings Page to replace the Leegality Default Logo for all signing pages.\n3. Business, Corporate and Enterprise users can also use features like custom sub-domain, custom email-id, email content customisation and custom color schemes for their Organisation.\n## Templates\nYou can create a Template from your Dashboard from the in-built Word Processor, setup custom fields and then use the same to automically generate a PDF file for eSigning.\n\nYou can use your templates while creating a Workflow Profile. Using the workflow profile id associated with the template you can create an eSigning request for use.\n\n\n## Stamps\nIn case you want to use Stamp Papers for your Documents, you need to purchase the desired number of Stamp Papers for the desired State from your Dashboard. Once a request is placed, you can obtain the Stamp Series ID and pass the same while creating a Workflow Profile. We will automatically use the latest available Stamp Paper from the Series and merge the same with your Document.\n## Expiry\nEvery signing Request has an expiry period within which the document must be signed.  This can be set while creating a Workflow, under the Advanced Options tab, using the Expiry parameter, (Default Value is 10, -1 is for 45 minutes, 0 means same day (11:59 PM) , 1 stands for next day , 2 stands for 2 days and so on).\n\nIf the document is not signed by the invitees within the expiry period, the invitation is cancelled and the transaction is reversed. If the invitation is signed by one invitee before the expiry period but has more pending invitations even after the expiry period, the invitaion remains in Sent state and need to be manually activated again- either from the Dashboard or calling the edit API. Error Webhooks are called on expiry of every invitation.\n## Wallet usage\nOn successful request creation, the respective transaction charge is reserved from your Wallet. Once the signature is actually carried out the reserved balance is used. If the invitation expires, the balance reserved for the expired invitations is moved back. In case of a Stamped document, the Stamp Paper is reversed in case no invitee signed the document. If even a single invitee successfully signed the document, the Stamp Paper cannot be reused.\n## Webhooks & Resources\nYou can acccess all the webhook information and resources like SDKs can be accessed from here: https://docs.leegality.com/webhooks_resources\n## Server URLs\n\n  Sandbox Dashboard - https://sandbox.leegality.com\n  \n  Sandbox Base URL - https://sandbox.leegality.com/api/v3.0\n  \n  Production Dashboard - https://app1.leegality.com \n  \n  Production Base URL - https://app1.leegality.com/api/v3.0",
    "termsOfService": "https://leegality.com/tnc.html",
    "contact": {
      "name": "Leegality Support",
      "email": "contact@leegality.com"
    },
    "x-logo": { 
      "url": "https://raw.githubusercontent.com/prakharmittal/leegality-apidocs/master/logo.png"
    },
    "version": "3.0"
  },
  "externalDocs": {
    "description": "Website",
    "url": "https://leegality.com"
  },
  "servers": [
    {
      "url": "https://sandbox.leegality.com/api"
    }
  ],
  "tags": [
    {
      "name": "eSigning Gateway",
      "description": "The complete eSigning workflow API"
    },
    {
      "name": "Stamp Details API",
      "description": "API to fetch stamp inventory related information or stamp related operations"
    },
    {
      "name": "Wallet Balance API",
      "description": "API for eSign Wallet Balance"
    },
    {
      "name": "API 3.1"
    }
  ],
  "paths": {
    "/v3.0/sign/request": {
      "get": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to check transaction status",
        "description": "You need to call this API with the documentId to get the status of the transaction and/or to fetch the latest version of the document, and the Audit Trail if the document has been completed.\nResponse for the Details API is also the same as the Success Webhook Data apart from the signType parameter. signType parameter will only be provided in the Webhook Data, and not in the Response to the Details API.",
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "description": "Leegality's Unique document level reference number, received as a response to POST call made to the Create API.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailsApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to create an eSigning Request",
        "description": "A POST call has to made to this API with name, email ID and/or Phone Number of the user(s). \nA Published Workflow Profile ID needs to be passed in order to successfully create an eSigning request.\n\nIf you're using a PDF Type Workflow you can pass a PDF file encoded in Base64 format. If you're using a Template Type Workflow and have fillable fields, you can pass the fields under the fields parameter as available on your dashboard.\nOn successful request creation, you get an ID & eSigning URL in response.\nPlease note that the term OfflineSignConfig refers to configurations for Cloud DSC.",
        "requestBody": {
          "description": "Send the Auth Token (generated from the Settings Tab of your Dashbaord) in the Header with key 'X-Auth-Token'",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to delete a document.",
        "description": "You need to call this API with the documentId to delete a document.",
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "description": "Unique document level reference number received as a response to POST call made to the Create API.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/sign/request/list": {
      "get": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to search",
        "description": "You need to call this API with a custom Search Query to search your existing documents.",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search query with which you want to search your invitations or completed documents. The search is made in document names , documentIDs and  Internal Reference Numbers.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "If you want to add filter for status of document you can use this parameter. Possible values are DRAFT, SENT, RECEIVED, SIGNED, COMPLETED, EXPIRED.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "This parameter can be used to set the maximum number of records you want to receive in response. Default value is 20 and maximum possible value is 40.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pass the offset value to offset the number of records to be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/sign/request/reactivate": {
      "post": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to reactivate expired documents",
        "description": "You can use this API to reactivate expired documents within 30 days of expiry. Please note that Stamped Documents cannot be reactivated using this API. ",
        "requestBody": {
          "description": "Send the Auth Token (generated from the Settings Tab of your Dashbaord) in the Header with key 'X-Auth-Token'",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReactivateApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/sign/request/resend": {
      "post": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to resend notifications",
        "description": "You can use this API to resend notifications. It will give you status of each signURL along with its status.",
        "requestBody": {
          "description": "Send the Auth Token (generated from the Settings Tab of your Dashbaord) in the Header with key 'X-Auth-Token'",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendApiRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/sign/request/invitation": {
      "delete": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to delete invitation in a document.",
        "description": "You can use this API to delete an unsigned invitation from a document or delete an invitee group if none if the invitees in the group have signed the document yet.",
        "parameters": [
          {
            "name": "signUrl",
            "in": "query",
            "description": "Signature URL received as a response to POST call made to the Create API which is unique for each invitee.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationDeleteApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/sign/request/complete": {
      "post": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to mark a document as completed.",
        "description": "You can use this API to mark an incomplete document as compelete.",
        "requestBody": {
          "description": "Send the Auth Token (generated from the Settings Tab of your Dashbaord) in the Header with key 'X-Auth-Token'",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCompleteApiRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCompleteApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/document/details": {
      "get": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to check document details",
        "description": "You need to call this API to get the in-depth detail of the document.",
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "description": "This parameter requires the unique Document ID generated by Leegality.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Default Value = true\n  You can disable this parameter by passing the value ‘false’ if\n  you don’t want to receive the PDF file in API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "auditTrail",
            "in": "query",
            "description": "Default Value = false You can enable this parameter by passing the value ‘true’ if you want to receive the digitally signed audit trail in API\n  response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "attachments",
            "in": "query",
            "description": "Default Value = false You can enable this parameter by passing the value ‘true’ if you want to receive the attachment files which the owner uploaded or signer uploaded while sending and signing the document respectively.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "failureReason",
            "in": "query",
            "description": "Default Value = false You can enable this parameter by passing the value ‘true’ if you want to receive the failure reason of a sign invitation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "verificationResponse",
            "in": "query",
            "description": "Default Value = false You can enable this parameter by passing the value ‘true’ if you want to receive verification response of a sign invitation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetailsApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/document/completed": {
      "get": {
        "tags": [
          "eSigning Gateway"
        ],
        "summary": "Use this API to check list of completed documents",
        "description": "This API is used to fetch all the completed documents within an organization owned by the organization users only. The order of the document list in the API response will be in ascending order as per the completion date of the document.",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Default Value= 20 Max Value= 40 This parameter is for pagination. You can adjust the number of records you want to fetch in a single API call by adjusting the number appropriately.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Default Value= 0 This parameter is for pagination. You can use this parameter if you want to skip some number of records from top.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "You can use this parameter if you want to filter out documents as per their name. The name provided here will not be an exact match but a pattern match.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "irn",
            "in": "query",
            "description": "You can use this parameter if you want to filter our documents having specific internal reference numbers. The irn match will be an exact match.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "You can use this parameter if you want to filter out documents having specific folder ID. The folderId match will be an exact match.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Format= dd-MM-yyyy Eg. 01-01-2020 (For 1st Jan 2020) You can use this parameter if you want to filter the documents completed after a specific date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Format= dd-MM-yyyy Eg. 01-01-2020 (For 1st Jan 2020) You can use this parameter if you want to filter the documents completed before a specific date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCompletedApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/series/list": {
      "get": {
        "tags": [
          "Stamp Details API"
        ],
        "summary": "Use this API to fetch details of all stamp series which exist in your account.",
        "description": "Use this API to receive details pertaining to each stamp series created in your Leegality account.\n\nThe details include information about the stamp papers (such as denomination and party names) as well as inventory status details (number of papers used, number of papers under process, etc). ",
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesListApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/series/groups/list": {
      "get": {
        "tags": [
          "Stamp Details API"
        ],
        "summary": "Use this API to fetch details of all stamp groups which exist in your account.",
        "description": "Use this API to receive details pertaining to each stamp group created in your Leegality account. \n\nThe details include the stamp group name, stamp group number, state, maximum value allowed, and the stamp series constituting that stamp group. ",
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesGroupApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/wallet/balance/details": {
      "get": {
        "tags": [
          "Wallet Balance API"
        ],
        "summary": "Use this API to check your eSign wallet balance.",
        "description": "Use this API to check your eSign wallet balance.  The API response will provide you the total eSign credits, broken up into the following categories- Expired, Consumed, Unused and Reserved.",
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBalanceDetailsApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.0/wallet/balance/list": {
      "get": {
        "tags": [
          "Wallet Balance API"
        ],
        "summary": "Use this API to fetch details of eSign purchases made from your account.",
        "description": "Use this API to fetch consumption and expiry details of eSign purchases made from your Leegality account.",
        "parameters": [
          {
            "name": "completed",
            "in": "query",
            "description": "Sending this parameter as true will give the list of eSign puchases which are completely consumed. If this parameter is not sent or is sent as false, this will give a list of all the purchases which still have eSign credits remaining.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "This parameter can be used to set the maximum number of records you want to receive in response. Default value is 20 and maximum possible value is 40.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pass the offset value to offset the number of records to be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBalanceListApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.1/document/details": {
      "get": {
        "tags": [
          "API 3.1"
        ],
        "summary": "Use this API to check document details",
        "description": "Use this API to get in-depth details about all documents triggered from your Leegality account.   This API can be used to fetch:\n\n\n  1.The signed document and other files related to the document such as the audit trail, reference attachments and supporting documents.  \n  \n  \n  2.The details about each signer & reviewer associated with the document, and the status of the document. \n  \n  \n  3.The details of the template/workflow used to trigger the document. \n  \n  \n  4.The details of the account/sender/folder from which the document was sent. \n\nThe API is highly configurable.  In the request parameters, you can enable exactly those parameters that you need to receive, while ignoring those parameters corresponding to data that you don’t need. ",
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "description": "This parameter requires the unique Document ID generated by Leegality for every document in response to a successful create request\n\n  *This is a mandatory field",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to received the PDF file in the API response in base64 format.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "auditTrail",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the Audit trail PDF file in the API response - only applicable to 'Completed' document i.e. Document where all the signatories have signed the document.\n\n  Note- Audit trail for a deleted document can also be fetched",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "document_scheduledDeletionDate",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the scheduled document deletion date information. This is applicable in case the \"Auto delete after 7 days\" setting is turned on which deleted any completed document after 7 days of completion.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "document_customMessage",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the Custom message configured on the invitation emails/SMS.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "document_deleteOnComplete",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive information if delete on complete was switched on for the document.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "document_requestSigningOrder",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to fetch the signing order status whether the signature links are activated sequentially or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "document_requireSigningOrder",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to fetch whether the signing order was required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workflow",
            "in": "query",
            "description": "Default Value = false\n\n  Details of the workflow associated with the documentID.\n\nDefault response parameters- \n  \n    \"id\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workflow_name",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the workflow name.\n  \n  \"workflow\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workflow_type",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the workflow type i.e. PDF or Template.\n\n  \"workflow\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workflow_subType",
            "in": "query",
            "description": "Default Value = false\n  Pass this parameter as TRUE to receive the workflow sub-type i.e. Single PDF/template type workflow or Multiple PDF enabled.\n\n  \"workflow\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Default Value = false\n  \n  Template details associated with the documentID.\n\nDefault response parameters-\n\n    \"id\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "template_name",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the template name used for the concerned document.\n\n\"template\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Default Value = false\n\n  Account details associated with the documentID.\n\nDefault response parameters-\n  \n    \"id\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "account_name",
            "in": "query",
            "description": "Default Value = false\n\n  Organization name of the account.\n\nLogin >> Account >> Admin >> Organization name is mentioned.\n\n  \"account\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "account_label",
            "in": "query",
            "description": "Default Value = false\n\n  Department name of the sender\n\nLogin >> Account >> Admin >> Department name is mentioned under the organization name.\n\n  \"account\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "account_brandName",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the brand name configured for the concerned account.\n\n\"account\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sender",
            "in": "query",
            "description": "Default Value = false\n\n  Sender details associated with the documentID.\n\nDefault response parameters-\n  \n    \"username\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sender_name",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the sender name.\n\n\"sender\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "folder",
            "in": "query",
            "description": "Default Value = false\n\n  Folder associated with the documentID.\n\nDefault response parameters-\n\n    \"id\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "folder_name",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the folder name(s) for the concerned document.\n\n\"account\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stampDetails",
            "in": "query",
            "description": "Default Value = false\n\n  Stamp paper details associated with the documentID\n\nDefault response parameters-\n\n    \"stampvalue\",\n    \"state\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stampDetails_groupName",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the group name for the stamp papers attached. Stamp groups are a collection of stamp series for a single state.\n\n\"stampDetails\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stampDetails_groupNumber",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the group number for the stamp papers attached.\n\n\"stampDetails\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stampDetails_maximumValuePermitted",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the maximum permitted value configured in the stamp group. Any stamp value passed in the create api above this value will be rejected.\n\n\"stampDetails\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stampDetails_stamps",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this as true to receive stamp paper specific information associated with the documentID.\n\nDefault response parameters-\n\n    \"series\",\n    \"amount\",\n    \"serialNumber\"\n\n\"stampdetails\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stampDetails_stamps_associatedDocumentId",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as true to receive the documentID associated with the stamp paper.\n\nThis is the document ID that is physically printed on the stamp paper.\n\n\n  \"stampDetails\" & \"stampdetails_stamps\" parameters also need to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "referenceAttachments",
            "in": "query",
            "description": "Default Value = false Pass this parameter as TRUE to receive the attachments sent with the invitation.\nAttachment are files which the owner uploaded while sending the document.\n\n  \n  Default response parameters-\n\n    \"file\", \n    \"name\",\n    \"type\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "neslDocumentDetails",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the NESL data details if NESL type signer is present.\n\nDefault response parameters-\n\n    \"transactionId\",\n    \"loanDetails\":\n    {\n      \"loanNumber\", \n      \"sanctionNumber\", \n      \"registrationType\", \n      \"state\", \n      \"branchName\", \n      \"branchAddress\",\n      \"dateOfSanction\", \n      \"emiAmount\", \n      \"rateOfInterest\",\n      \"sanctionAmount\", \n      \"tenure\", \n      \"typeOfDebt\", \n      \"accountClosedFlag\", \n      \"fundType\", \n      \"sanctionCurrency\", \n      \"creditSubtype\", \n      \"facilityName\", \n      \"amountOverdue\", \n      \"otherChargeAmount\", \n      \"debtStartDate\", \n      \"interestAmount\", \n      \"oldDebtRefNo\", \n      \"principalOutstanding\", \n      \"loanRemark\", \n      \"totalOutstandingAmount\", \n      \"creditorBusinessUnit\", \n      \"drawingPower\", \n      \"daysPastDue\"\n    }",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "neslDocumentDetails_securityDetails",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the NESL security details data if NESL type signer is present.\n\n\"neslDocumentDetails\" parameter also needs to be passed as true to recieve this in response.\n\n\n  Default response parameters-\n  \n    \"securityDescription\",\n    \"assetsType\",\n    \"chargeType\",\n    \"assetId\",\n    \"doc\",\n    \"dov\",\n    \"cersaiId\",\n    \"rocChargeId\",\n    \"securityValue\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "neslDocumentDetails_stampDetails",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the NESL stamp details data if NESL type signer is present.\n\n\"neslDocumentDetails\" parameter also needs to be passed as true to recieve this in response.\n\n  \n  Default response parameters-\n  \n    \"firstParty\",\n    \"secondParty\",\n    \"stampDutyAmount\",\n    \"considerationPrice\",\n    \"descriptionOfDocument\",\n    \"stampDutyPaidBy\",\n    \"articleCode\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cc",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to receive details about contacts configured as “CCs” for the document.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "coordinatePicker",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as ‘true' if you want to check if coordinate picker has been enabled for this document.  Note that the response will 'true’ if coordinate picker is enabled and is active for a document (i.e., the document has not yet been sent out for signing).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this as true to recieve invitee level configurations associated with this invitation.\n\nDefault response parameters-\n  \n    \"name\",\n    \"email\",\n    \"phone\",\n    \"inviteetype\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_retry",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the number of retry attemps configured for the signer (only applicable to aadhaar eSign).\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_fixedName",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to find out of the invitee is allowed to edit their name in the signing journey or not.\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_noName",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to find out whether the invitee name will appear in the signature appearance.\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_supportingDocument",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the supporting document requirement configured.\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_organizationConfig",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the organization seal settings configured for this invitation which will apeear on the signature appearance with the organiztion name in the signature box and the organization name and chosen seal forming a digital rubber stamp around the signature box.\n\nDefault response parameters-\n  \n    \"nameRequired\",\n    \"fixedName\",\n    \"name\",\n    \"requireSeal\",\n    \"sealType\"\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_security",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the status of the security modules configured for an invitee.\n\nDefault response parameters-\n  \n    \"enforceAuthentication\",\n    \"twoFactorAuthentication\",\n    \"sendDocumentRawUrl\",\n    \"captureLocation\",\n    \"capturePhoto\",\n    \"userLiveliness\"\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_customURL",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the custom URL configured.\n\nDefault response parameters-\n  \n    \"webhookURL\",\n    \"redirectURL\",\n    \"errorWebhookURL\",\n    \"baseURL\",\n    \"webhookVersion\"\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeConfigs_customConsent",
            "in": "query",
            "description": "Default Value = false\nPass this parameter as TRUE to receive the custom consent content configured. Custom consent is an additional configurable consent that has to be mandatorily accepted by the signer before he or she can proceed to sign the document.\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_recordReviewerDetails",
            "in": "query",
            "description": "Default Value = false\n\n Pass this parameter as TRUE to find out whether Record reviewer details (in the audit trail) has been activated or not\n\n\"invitations_inviteeConfigs\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeGroup",
            "in": "query",
            "description": "Default Value = false\n  \n  Invitee group is a single invite consisting of multiple signers where e.g. 5 people are added in the group and 2 (variable) people out of the 5 (variable) are required to sign the document for invite completion.\n\nDefault response parameters-\n\n    \"id\",\n    \"completionStatus\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeGroup_name",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the group name.\n\n\"invitations_inviteeGroup\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeGroup_completionThreshold",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the group completion threshhold (Number of signs to be completed in a group invite for invite completion).\n\n\"invitations_inviteeGroup\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeGroup_size",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive the number of a invitees in a group invite.\n\n\"invitations_inviteeGroup\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_inviteeGroup_completed",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as TRUE to receive whether the group sign has been completed.\n\n\"invitations_inviteeGroup\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_signatureOptions",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to receive the Signature options allowed under a specific eSign for an type invitation i.e.\n  \n  \"aadhaar\" - OTP/ Biometric/ Iris\n  \n  *virtual\" - Draw signature/ Computer-generated signature",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_signatureOptionsUsed",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the Signature options used for an invitation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_neslInvitationDetails",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the NESL invitation details of an invitee.\n\nDefault response parameters-\n  \n    \"type\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_neslInvitationDetails_participantDetails",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the participant details of NESL invitation.\n\nDefault response parameters-\n  \n    \"fullName\",\n    \"contactPersonName\", \n    \"contactRelation\", \n    \"emailId\", \n    \"mobileNumber\", \n    \"dob\", \n    \"legalConstitution\", \n    \"alternateEmailId\", \n    \"alternateMobileNumber\", \n    \"officialDocType\", \n    \"officialDocId\", \n    \"registeredAddress\", \n    \"registeredPinCode\", \n    \"designation\", \n    \"communicationAddress\", \n    \"communicationAddressPinCode\", \n    \"cin\", \n    \"kin\", \n    \"partyType\"\n\n\"invitations_neslInvitationDetails\" parameter also needs to be passed as true to recieve this in response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_InvitationOfflineSignDetails",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the details of the cloud DSC invitation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_invitationStatus_failureReason",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the reason due to which the invitation failed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_invitationStatus_rejectionMessage",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the reason provided by the signer for rejecting the invitation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_certificateData",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to recieve the data received in the signing certificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_verificationRequest",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as true in order to fetch whether certain certificate parameters have been activated for verification or not. Only applicable to Aadhaar eSign/ Offline_Sign (Cloud DSC)/DSC/Nesl \n\nDefault response parameters-\n    \n    \"aadhaarConfig\"-\n      \"smartNamePercentage\",\n      \"signatureVerification\",\n      \"pincodeVerification\",\n      \"stateVerification\",\n      \"titleVerification\",\n      \"yobVerification\",\n      \"genderVerification\"\n\n    \"offlineConfig\"-\n      \"smartNamePercentage\",\n      \"signatureVerification\",\n      \"pincodeVerification\",\n      \"stateVerification\",\n      \"titleVerification\",\n      \"yobVerification\",\n      \"genderVerification\"\n\n    \"dscConfig\"-\n      \"smartNamePercentage\",\n      \"signatureVerification\",\n      \"pincodeVerification\",\n      \"stateVerification\"\n\n    \"neslConfig\"-\n      \"smartNamePercentage\",\n      \"signatureVerification\",\n      \"pincodeVerification\",\n      \"stateVerification\",\n      \"titleVerification\",\n      \"yobVerification\",\n      \"genderVerification\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_verificationResponse",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to the get the results of the certificate details fetched matched against the input provided.\n\n Default response parameters-\n\n    \"smartNamePercentage\",\n    \"signatureVerification\",\n    \"nameVerification\",\n    \"pincodeVerification\",\n    \"stateVerification\",\n    \"titleVerification\",\n    \"yobVerification\",\n    \"genderVerification\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invitations_supportingDocuments",
            "in": "query",
            "description": "Default Value = false\n  \n  Pass this parameter as true to receive the supporting documents requested from the signer.\n\nDefault response parameters-\n\n    \"file\",\n    \"name\",\n    \"type\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetails3_1ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.1/series/list": {
      "get": {
        "tags": [
          "API 3.1"
        ],
        "summary": "Use this API to fetch details of all stamp series which exist in your account.",
        "description": "Use this API to receive details pertaining to each stamp series created in your Leegality account.\n\nThe details include information about the stamp papers (such as denomination and party names) as well as inventory status details (number of papers used, number of papers under process, etc). ",
        "parameters": [
          {
            "name": "firstPartyName",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the first party name in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "secondPartyName",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the second party name in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "purpose",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the value of purpose in series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "legend",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the value of legend in series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "underProcess",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the number of stamps which have status as under process in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blocked",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the number of stamps which have status as blocked in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reserved",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the number of stamps which have status as reserved in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unused",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the number of stamps which have status as unused in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "used",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the number of stamps which have status as used in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "expired",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the number of stamps which have status as expired in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "total",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive the total number of stamps in a series in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesList3_1ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.1/series/expiry": {
      "get": {
        "tags": [
          "API 3.1"
        ],
        "summary": "Use this API to fetch details of all stamp series which will expire in some days in your account.",
        "description": "Use this API to receive details pertaining to stamps expiry in ascending order of their expiry date. The stamps are grouped for same expiry date per series per purchase request.",
        "parameters": [
          {
            "name": "lookUpPeriod",
            "in": "query",
            "description": "Default Value = 30\n\n  Pass this parameter as in number of days to receive all the stamp series that will expire in the days range in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includeExpired",
            "in": "query",
            "description": "Default Value = false\n\n  Pass this parameter as TRUE to receive all the stamps which are already expired in the API response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesExpiry3_1ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    },
    "/v3.1/document/fetchDocument": {
      "get": {
        "tags": [
          "API 3.1"
        ],
        "summary": "Use this API to download document, audit trail, supporting files or attached files in binary format.",
        "description": "Use this API to fetch any of the following documents associated with a documentID - (a) the updated document to be eSigned, (b) the Audit Trail, (c) the supporting documents uploaded by any invitee, or (d) the reference attachments uploaded by the sender.  \nThe relevant document will be shared in response in binary format. ",
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "description": "The documentID associated with the document you want to fetch.  The documentID is shared in response to the API call made to create an eSign request.  The documentID can also be retrieved from the Leegality dashboard. ",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentDownloadType",
            "in": "query",
            "description": "Possible values- DOCUMENT, AUDIT_TRAIL, ATTACHMENT, SUPPORTING_DOCUMENT.\n\nThe type of document you want to receive in response.  The permitted values are DOCUMENT (for receiving the updated document), AUDIT_TRAIL (for receiving the Audit Trail generated by Leegality on document completion), ATTACHMENT (for receiving the attachments uploaded by the Sender), or SUPPORTING_DOCUMENT (for receiving the supporting documents uploaded by an invitee).  You can only enter 1 value in a single API call. \n\nNote- Only 1 of the values will be accepted.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supportDocumentUrl",
            "in": "query",
            "description": "URL of Invitee whose supporting documents is to be fetched.\n \n\nPass the invitation URL of the Invitee whose supporting documents you want to receive.  The invitation URL is received in response to the API call made to create an eSign request.  This parameter is relevant only if the documentDownloadType is SUPPORTING_DOCUMENT.\n\nNote- Only if the documentDownloadType = SUPPORTING_DOCUMENT  - if not the value passed will be ignored. ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Will be a numeric value indicating which attachment is to be fetched.\n\nPass the index number of the Supporting Document or Attachment you want to receive. The index starts from 0 with an increment of 1. For example, if you want to receive the 1st supporting document uploaded by an invitee, pass the index value as 0, and if you want to receive the 2nd supporting document uploaded by an invitee, pass the index value as 1, and so on and so forth.  This is relevant only if the documentDownloadType is SUPPORTING_DOCUMENT or ATTACHMENT. \n\nNote- Only if Document the documentDownloadType = SUPPORTING_DOCUMENT or ATTACHMENT - if not the value passed will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relevant document (based on the input) in Binary Format",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Auth-Token": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "SignRequest": {
        "required": [
          "file",
          "invitees",
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string",
            "description": "Provide the ID of the Workflow from your Leegality Dashboard."
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "stampSeries": {
            "type": "string",
            "description": "Pass the stamp series value here. If you have enabled the option of choosing the stamp while using the workflow. You can check the stamp series value from 'Stamp' tab in the dashboard."
          },
          "seriesGroup": {
            "type": "string",
            "description": "Pass the stamp group value here. If you have enabled the option of choosing the stamp group while using the workflow. You can check the stamp group value from 'Stamp' tab in the dashboard."
          },
          "stampValue": {
            "type": "string",
            "description": "Pass the stamp amount value here. If you have enabled the option of choosing the stamp group while using the workflow."
          },
          "neslData": {
            "$ref": "#/components/schemas/Nesl"
          },
          "invitees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invitee"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cc"
            }
          },
          "irn": {
            "type": "string",
            "description": "irn stands for Internal Reference Number. Use this value to set a custom Internal Refernce Number to your document. You can later use the internal reference number to search for this document either through the Search API or through your Dashboard."
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Use this to set the Name of file to be eSigned."
          },
          "file": {
            "type": "string",
            "description": "Pass the Base64 encoded file string value of the PDF file you want to get eSigned from the user. Maximum size of the file before encoding is 15 MB."
          },
          "fields": {
            "description": "To be used if you are using a Template. Pass the values of the fields of the Template based on the sample JSON provided in your Dashboard for your Template. You can download the same from the Download Form Fields Button from your Template Editor."
          },
          "additionalFiles": {
            "description": "This parameter accepts array of string, Pass the Base64 encoded files string value of the PDF file you want to append with the file. Maximum size of all files is upto 15 MB. In case of template these files will be appended to the selected template."
          }
        }
      },
      "AadhaarConfig": {
        "type": "object",
        "properties": {
          "verifyName": {
            "type": "boolean",
            "description": "Pass 'true' if you want the document to be generated only if the provided Name matches with the Name contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. In case of mismatch, the transaction will be charged but the document will be rejected. Character case is ignored for verification. If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory,  then any value passed for this parameter in the API will be ignored.",
            "default": false
          },
          "verifySmartName": {
            "type": "boolean",
            "description": "Smart Name value will indicate a value percentage of comparision between the name on the certificate and the name provided while signing. Value will be provided only if invitation is made using 'true' in verifySmartName and only in case of Aadhaar eSign, Nesl or DSC.\n If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyPincode": {
            "type": "string",
            "description": "Pass PINCODE if you want to verify the user's PIN Code with the PIN Code contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. The document will only be generated if the PIN Codes match. The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyYob": {
            "type": "integer",
            "description": "Pass YEAR OF BIRTH in DIGITS if you want to verify the user's Year of Birth with the Year of Birth contained in the Digital Signature Certificate. This parameter will only function in case of an Aadhaar eSign or Nesl. The document will only be generated if the Year of Birth matches. In case the certificate does not have this value, this parameter will be ignored. Value should be between 1900 and the current year. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyTitle": {
            "type": "string",
            "description": "Pass the last 4 digits of the UID No. if you want to verify the user's identity as contained in the Digital Signature Certificate. This paramater only works with Aadhaar eSign or Nesl. The document will only be generated if both the values match. In case, the value is not present in the certificate, this parameter will be ignored. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyState": {
            "type": "string",
            "description": "Pass value of State if you want to verify the user's State with the value of State contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. The document will only be generated if the values of States match.The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyGender": {
            "type": "string",
            "description": "Pass Gender value if you want to verify the user's Gender with the value contained in the Digital Signature Certificate issued.This parameter will only function in case of Aadhaar eSign or Nesl. The document will only be generated if both the values match. Possible values are 'M' for Male, 'F' for Female and 'T' for Transgender. All values have to be in Capitals. In case the certificate does not have this value, the parameter will be ignored. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          }
        }
      },
      "OfflineSignConfig": {
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string",
            "description": "To fix the signerID to be used for signing, pass the mobile number associated with the SignerID that is to be used for signing the document. Any two of mobileNumber, PAN and SignerID are required for fixing the signerID. "
          },
          "pan": {
            "type": "string",
            "description": "To fix the signerID to be used for signing, pass the PAN associated with the SignerID that is to be used for signing the document. Any two of mobileNumber, PAN and SignerID are required for fixing the signerID."
          },
          "signerId": {
            "type": "string",
            "description": "To fix the signerID to be used for signing, pass the SignerID (username) that is to be used for signing the document. Any two of mobileNumber, PAN and SignerID are required for fixing the signerID. "
          },
          "verifyName": {
            "type": "boolean",
            "description": "Pass 'true' if you want the document to be generated only if the provided Name matches with the Name contained in the Digital Signature Certificate. In case of mismatch, the transaction will be charged but the document will be rejected. Character case is ignored for verification. If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory, then any value passed for this parameter in the API will be ignored.",
            "default": false
          },
          "verifySmartName": {
            "type": "boolean",
            "description": "Smart Name value will indicate a value percentage of comparision between the name on the certificate and the name provided while signing. Value will be provided only if invitation is made using 'true' in verifySmartName. If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory, then any value passed for this parameter in the API will be ignored."
          },
          "verifyPincode": {
            "type": "string",
            "description": "Pass PINCODE if you want to verify the user's PIN Code with the PIN Code contained in the Digital Signature Certificate. The document will only be generated if the PIN Codes match. The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off, then any value passed for this parameter in the API will be ignored."
          },
          "verifyState": {
            "type": "string",
            "description": "Pass Gender value if you want to verify the user's Gender with the value contained in the Digital Signature Certificate issued. The document will only be generated if both the values match. Possible values are 'M' for Male, 'F' for Female and 'T' for Transgender. All values have to be in Capitals. In case the certificate does not have this value, the parameter will be ignored. If at the time of configuring the workflow in the Dashboard, this parameter is turned off, then any value passed for this parameter in the API will be ignored."
          },
          "verifyYob": {
            "type": "integer",
            "description": "Year of Birth verification is not supported for OFFLINE_SIGN as the signature certificate does not contain this parameter.  Any value passed in the API will be ignored. "
          },
          "verifyTitle": {
            "type": "string",
            "description": "Pass the last 4 digits of the UID No. if you want to verify the user's identity as contained in the Digital Signature Certificate. This paramater only works with SignerIDs created using Aadhaar XML. The document will only be generated if both the values match. In case, the value is not present in the certificate, this parameter will be ignored. If at the time of configuring the workflow in the Dashboard, this parameter is turned off, then any value passed for this parameter in the API will be ignored."
          },
          "verifyGender": {
            "type": "string",
            "description": "Gender verification is not supported for OFFLINE_SIGN as the signature certificate does not contain this parameter.  Any value passed in the API will be ignored. "
          }
        }
      },
      "DscConfig": {
        "type": "object",
        "properties": {
          "verifyName": {
            "type": "boolean",
            "description": "Pass 'true' if you want the document to be generated only if the provided Name matches with the Name contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. In case of mismatch, the transaction will be charged but the document will be rejected. Character case is ignored for verification. If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory,  then any value passed for this parameter in the API will be ignored.",
            "default": false
          },
          "verifySmartName": {
            "type": "boolean",
            "description": "Smart Name value will indicate a value percentage of comparision between the name on the certificate and the name provided while signing. Value will be provided only if invitation is made using 'true' in verifySmartName and only in case of Aadhaar eSign, Nesl or DSC.\n If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyPincode": {
            "type": "string",
            "description": "Pass PINCODE if you want to verify the user's PIN Code with the PIN Code contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. The document will only be generated if the PIN Codes match. The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyState": {
            "type": "string",
            "description": "Pass value of State if you want to verify the user's State with the value of State contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. The document will only be generated if the values of States match.The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          }
        }
      },
      "NeslConfig": {
        "type": "object",
        "properties": {
          "verifyName": {
            "type": "boolean",
            "description": "Pass 'true' if you want the document to be generated only if the provided Name matches with the Name contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. In case of mismatch, the transaction will be charged but the document will be rejected. Character case is ignored for verification. If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory,  then any value passed for this parameter in the API will be ignored.",
            "default": false
          },
          "verifySmartName": {
            "type": "boolean",
            "description": "Smart Name value will indicate a value percentage of comparision between the name on the certificate and the name provided while signing. Value will be provided only if invitation is made using 'true' in verifySmartName and only in case of Aadhaar eSign, Nesl or DSC.\n If at the time of configuring the workflow in the Dashboard, this parameter is marked as mandatory,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyPincode": {
            "type": "string",
            "description": "Pass PINCODE if you want to verify the user's PIN Code with the PIN Code contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. The document will only be generated if the PIN Codes match. The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyYob": {
            "type": "integer",
            "description": "Pass YEAR OF BIRTH in DIGITS if you want to verify the user's Year of Birth with the Year of Birth contained in the Digital Signature Certificate. This parameter will only function in case of an Aadhaar eSign or Nesl. The document will only be generated if the Year of Birth matches. In case the certificate does not have this value, this parameter will be ignored. Value should be between 1900 and the current year. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyTitle": {
            "type": "string",
            "description": "Pass the last 4 digits of the UID No. if you want to verify the user's identity as contained in the Digital Signature Certificate. This paramater only works with Aadhaar eSign or Nesl. The document will only be generated if both the values match. In case, the value is not present in the certificate, this parameter will be ignored. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyState": {
            "type": "string",
            "description": "Pass value of State if you want to verify the user's State with the value of State contained in the Digital Signature Certificate. This parameter will only work for Aadhaar eSign, Nesl or DSC. The document will only be generated if the values of States match.The parameter will be ignored if this field is not present in the Certificate. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          },
          "verifyGender": {
            "type": "string",
            "description": "Pass Gender value if you want to verify the user's Gender with the value contained in the Digital Signature Certificate issued.This parameter will only function in case of Aadhaar eSign or Nesl. The document will only be generated if both the values match. Possible values are 'M' for Male, 'F' for Female and 'T' for Transgender. All values have to be in Capitals. In case the certificate does not have this value, the parameter will be ignored. If at the time of configuring the workflow in the Dashboard, this parameter is turned off,  then any value passed for this parameter in the API will be ignored."
          }
        }
      },
      "Nesl": {
        "type": "object",
        "properties": {
          "documentDetail": {
            "$ref": "#/components/schemas/NeslDocument"
          },
          "stampData": {
            "$ref": "#/components/schemas/NeslStamp"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NeslParticipants"
            }
          },
          "neslSecurities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NeslSecurities"
            }
          }
        }
      },
      "NeslDocument": {
        "required": [
          "accountClosedFlag",
          "creditSubtype",
          "dateOfSanction",
          "emiAmount",
          "facilityName",
          "fundType",
          "loanNumber",
          "rateOfInterest",
          "registrationType",
          "sanctionAmount",
          "sanctionCurrency",
          "sanctionNumber",
          "state",
          "tenure",
          "typeOfDebt"
        ],
        "type": "object",
        "properties": {
          "loanNumber": {
            "type": "string",
            "description": "The loan number associated with the debt."
          },
          "sanctionNumber": {
            "type": "string",
            "description": "The sanction number associated with the debt."
          },
          "registrationType": {
            "type": "string",
            "description": "Type of debt (Individual Loan or Non-Individual Loan).\nAccepted values are- INDIVIDUAL_LOAN, NON_INDIVIDUAL_LOAN."
          },
          "state": {
            "type": "string",
            "description": "The state in which stamp duty is being paid."
          },
          "branchName": {
            "type": "string",
            "description": "The name of the branch granting the loan."
          },
          "branchAddress": {
            "type": "string",
            "description": "The address of the branch granting the loan."
          },
          "dateOfSanction": {
            "type": "string",
            "description": "The date on which the loan was sanctioned as per the lender's CBS."
          },
          "emiAmount": {
            "type": "string",
            "description": "Interest installment amount payable on the loan."
          },
          "rateOfInterest": {
            "type": "string",
            "description": "Rate of Interest on the loan."
          },
          "sanctionAmount": {
            "type": "string",
            "description": "The amount sanctioned by the financial creditor."
          },
          "tenure": {
            "type": "string",
            "description": "The tenure of the loan."
          },
          "typeOfDebt": {
            "type": "string",
            "description": "The type of loan (financial debt or operational debt).\nAccepted values are- FINANCIAL, OPERATIONAL."
          },
          "accountClosedFlag": {
            "type": "string",
            "description": "Whether the account is closed (yes, no, or assigned debt).\nAccepted values are- YES, NO, ASSIGNED."
          },
          "fundType": {
            "type": "string",
            "description": "Whether the credit facility is funded or non funded.\nAccepted values are- FUNDED, NON_FUNDED."
          },
          "sanctionCurrency": {
            "type": "string",
            "description": "The currency in which the loan is denominated (INR or USD).\nAccepted values are- INR, USD."
          },
          "creditSubtype": {
            "type": "string",
            "description": "Whether the financial debt is created pursuant to a credit facility or the purchase of a property.\nAccepted values are- CREDIT_FACILITY, PROPERTY_BUYER."
          },
          "facilityName": {
            "type": "string",
            "description": "The name of the loan facility."
          },
          "amountOverdue": {
            "type": "string",
            "description": "The amount overdue on the loan."
          },
          "otherChargeAmount": {
            "type": "string",
            "description": "Any other charges (if applicable)."
          },
          "debtStartDate": {
            "type": "string",
            "description": "The date on which the financial debt started."
          },
          "interestAmount": {
            "type": "string",
            "description": "The amount of interest."
          },
          "oldDebtRefNo": {
            "type": "string",
            "description": "The old debt reference number (applicable in case there is a change in the debt reference number)."
          },
          "principalOutstanding": {
            "type": "string",
            "description": "The outstanding principal amount."
          },
          "loanRemark": {
            "type": "string",
            "description": "Loan remarks (if any)."
          },
          "totalOutstandingAmount": {
            "type": "string",
            "description": "Total outstanding amount."
          },
          "creditorBusinessUnit": {
            "type": "string",
            "description": "The business unit of the creditor providing the debt (such as SME, Retail etc)."
          },
          "drawingPower": {
            "type": "string",
            "description": "The drawing power of the loan."
          },
          "daysPastDue": {
            "type": "string",
            "description": "The number of days past due date."
          }
        }
      },
      "NeslStamp": {
        "required": [
          "articleCode",
          "considerationPrice",
          "descriptionOfDocument",
          "firstParty",
          "firstPartyOVDType",
          "firstPartyOVDValue",
          "firstPartyPin",
          "secondParty",
          "secondPartyOVDType",
          "secondPartyOVDValue",
          "secondPartyPin",
          "stampDutyAmount",
          "stampDutyPaidBy"
        ],
        "type": "object",
        "properties": {
          "firstParty": {
            "type": "string",
            "description": "The name of the first party (for the stamp paper)."
          },
          "secondParty": {
            "type": "string",
            "description": "The name of the second party (for the stamp paper)."
          },
          "stampDutyAmount": {
            "type": "string",
            "description": "The stamp duty amount."
          },
          "considerationPrice": {
            "type": "string",
            "description": "The consideration price for the purposes of stamp duty."
          },
          "descriptionOfDocument": {
            "type": "string",
            "description": "The description of the document for the purposes of stamp duty."
          },
          "stampDutyPaidBy": {
            "type": "string",
            "description": "The name of the party paying the stamp duty."
          },
          "articleCode": {
            "type": "string",
            "description": "Article code for payment of stamp duty."
          },
          "firstPartyPin": {
            "type": "string",
            "description": "The pincode of the first party (for the stamp paper). This is mandatory for the states of Madhya Pradesh & West Bengal."
          },
          "secondPartyPin": {
            "type": "string",
            "description": "The pincode of the second party (for the stamp paper). This is mandatory for the states of Madhya Pradesh & West Bengal."
          },
          "firstPartyOVDType": {
            "type": "string",
            "description": "The OVD Type of the first party (for the stamp paper). This will be List of values. This is mandatory for the states of West Bengal."
          },
          "firstPartyOVDValue": {
            "type": "string",
            "description": "The OVD Value of the first party (for the stamp paper). This is mandatory for the states of West Bengal."
          },
          "secondPartyOVDType": {
            "type": "string",
            "description": "The OVD Type of the second party (for the stamp paper). This will be List of values. This is mandatory for the states of West Bengal."
          },
          "secondPartyOVDValue": {
            "type": "string",
            "description": "The OVD Value of the second party (for the stamp paper). This is mandatory for the states of West Bengal."
          }
        }
      },
      "NeslParticipants": {
        "required": [
          "contactPersonName",
          "contactRelation",
          "dob",
          "emailId",
          "fullName",
          "legalConstitution",
          "mobileNumber",
          "officialDocId",
          "officialDocType",
          "partyType"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name of the Party."
          },
          "contactPersonName": {
            "type": "string",
            "description": "Full name of the contact person of the Party."
          },
          "contactRelation": {
            "type": "string",
            "description": "Relation of the party to the debt (Debtor, Guarantor, Co-obligant).\nAccepted values are- CREDITOR, DEBTOR, GUARANTOR, CO_OBLIGANT, SECURITY_PROVIDER, ASSIGNEE."
          },
          "emailId": {
            "type": "string",
            "description": "Email ID of the signer."
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile Number of the signer."
          },
          "dob": {
            "type": "string",
            "description": "Date of Birth/Incorporation."
          },
          "legalConstitution": {
            "type": "string",
            "description": "Legal constitution of the signer (Resident Individual, Private Limited, Public Limited, LLP, Proprietorship, Partnership, Entity created by Statute, Trust, HUF, Coop Society, Association of Persons, Government, Self Help Groups, Non-Resident, Foreign Company).\nAccepted values are- RESIDENT_INDIVIDUAL, PUBLIC_LTD, PRIVATE_LTD, LLP, PROPRIETORSHIP, PARTNERSHIP, ENTITY_CREATED_BY_STATUTE, TRUST, HUF, CO_OP_SOCIETY, ASSOCIATION_OF_PERSONS, GOVERNMENT, SELF_HELP_GROUP, NON_RESIDENT, FOREIGN_COMPANY."
          },
          "alternateEmailId": {
            "type": "string",
            "description": "Alternate email ID of the signer."
          },
          "alternateMobileNumber": {
            "type": "string",
            "description": "Alternate mobile of the signer."
          },
          "officialDocType": {
            "type": "string",
            "description": "Official Document Type (Pan Card, Driving License, Voter ID, Passport, Others).\nAccepted values are- PAN_CARD, DRIVING_LICENSE, VOTER_ID, PASSPORT, ANY_OTHER_OFFICIAL_ID."
          },
          "officialDocId": {
            "type": "string",
            "description": "Official Document ID."
          },
          "registeredAddress": {
            "type": "string",
            "description": "Registered address of the signer."
          },
          "registeredPinCode": {
            "type": "string",
            "description": "PIN code of the registered address of the signer."
          },
          "designation": {
            "type": "string",
            "description": "Designation of the signer (relevant in case of corporate entities)."
          },
          "communicationAddress": {
            "type": "string",
            "description": "Communication address of the signer."
          },
          "communicationAddressPinCode": {
            "type": "string",
            "description": "PIN code of the communication address of the signer."
          },
          "cin": {
            "type": "string",
            "description": "Corporate Identification Number (relevant in case of corporate entities)."
          },
          "kin": {
            "type": "string",
            "description": "KYC Identification Number of signer."
          },
          "partyType": {
            "type": "string",
            "description": "Type of Party (Indian entity/ Resident Individual/ Foreign Entity/ NRI/Foreign Individual.\nAccepted values are- INDIAN_ENTITY, RESIDENT_INDIVIDUAL, FOREIGN_ENTITY, NRI."
          }
        }
      },
      "NeslSecurities": {
        "required": [
          "assetId",
          "assetsType",
          "chargeType",
          "securityDescription"
        ],
        "type": "object",
        "properties": {
          "securityDescription": {
            "type": "string",
            "description": "Description of security."
          },
          "assetsType": {
            "type": "string",
            "description": "Type of asset forming security (Movable, Immovable, Intangible, Not Classified).\nAccepted values are- MOVABLE, IMMOVABLE, INTANGIBLE, NOT_CLASSIFIED."
          },
          "chargeType": {
            "type": "string",
            "description": "Type of charge created (Mortgage, Hypothecation, Charge, Assignment, Pledge, Lien, Negative Lien, Guarantee, Others, Not Classified).\nAccepted values are- MORTGAGE, HYPOTHECATION, CHARGE, ASSIGNMENT, PLEDGE, LIEN, NEGATIVE_LIEN, GUARANTEE, OTHERS, NOT_CLASSIFIED."
          },
          "assetId": {
            "type": "string",
            "description": "Asset ID of the Security (used internally by the lender)."
          },
          "doc": {
            "type": "string",
            "description": "Date of creation of security."
          },
          "dov": {
            "type": "string",
            "description": "Date of valuation of security."
          },
          "cersaiId": {
            "type": "string",
            "description": "CERSAI ID of security created."
          },
          "rocChargeId": {
            "type": "string",
            "description": "ROC ID for security created."
          },
          "securityValue": {
            "type": "string",
            "description": "Value of security."
          }
        }
      },
      "ReactivateRequest": {
        "required": [
          "documentId"
        ],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "Document ID which need to be reactivated."
          },
          "expiryDays": {
            "maximum": 30,
            "minimum": -1,
            "type": "integer",
            "description": "Can be used to define the new timeout period after which an uncompleted transaction gets cancelled and reversed. -1 is for 45 minutes, 0 means same day (11:59 PM) , 1 stands for next day , 2 stands for 2 days and so on.",
            "default": 10
          }
        }
      },
      "ResendApiRequest": {
        "required": [
          "signUrls"
        ],
        "type": "object",
        "properties": {
          "signUrls": {
            "maximum": 15,
            "minimum": 1,
            "type": "array",
            "items": {
              "type": "string",
              "description": "SignURL's need to be sent in the request which need to be re-notified. It should atleast contain one signURL."
            }
          }
        }
      },
      "DocumentCompleteApiRequest": {
        "required": [
          "documentId"
        ],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "Document Id of the document that needs to be marked as complete."
          }
        }
      },
      "Invitee": {
        "required": [
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the invitee."
          },
          "email": {
            "type": "string",
            "description": "Valid email address of the invitee. Either email or phone is required."
          },
          "phone": {
            "type": "string",
            "description": "Valid 10 digit mobile number of the invitee. Either email or phone is required."
          },
          "groupId": {
            "type": "string",
            "description": "If you are using group Invitee feature and signer from group then you need to pass Group ID in this parameter. You can found the Group ID while downloading payload from Leegality dashboard."
          },
          "groupName": {
            "type": "string",
            "description": "If you are using group Invitee feature and signer from group then you need to pass Group Name in this parameter. If you have already configured Group Name in the Leegality dashboard while configuring workflow then while downloading payload this parameter will be auto filled."
          },
          "completionThreshold": {
            "type": "string",
            "description": "If you are using group Invitee feature and signer from group then you need to pass Completion Threeshold in this parameter. If you have already configured Completion Threeshold in the Leegality dashboard while configuring workflow then while downloading payload this parameter will be auto filled."
          },
          "organizationName": {
            "type": "string",
            "description": "Name of organization of the signer, If you have enabled the configuration to use organizational signatrue while setting up workflow then you can use this parameter to pass the orgnaization name of the signer."
          },
          "aadhaarConfig": {
            "$ref": "#/components/schemas/AadhaarConfig"
          },
          "offlineSignConfig": {
            "$ref": "#/components/schemas/OfflineSignConfig"
          },
          "dscConfig": {
            "$ref": "#/components/schemas/DscConfig"
          },
          "neslConfig": {
            "$ref": "#/components/schemas/NeslConfig"
          }
        }
      },
      "Cc": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the CC."
          },
          "email": {
            "type": "string",
            "description": "Valid email ID of the CC."
          }
        }
      },
      "RequestApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/RequestApiResponse_data"
          }
        }
      },
      "ReactivateApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/ReactivateApiResponse_data"
          }
        }
      },
      "DocumentCompleteApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "InvitationDeleteApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DocumentDetailsApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/DocumentDetailsApiResponse_data"
          }
        }
      },
      "DocumentDetails3_1ApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/DocumentDetails3_1ApiResponse_data"
          }
        }
      },
      "DocumentDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID generated by Leegality ."
          },
          "name": {
            "type": "string",
            "description": "Document Name."
          },
          "irn": {
            "type": "string",
            "description": "Internal reference number *This response maybe sent in case of a deleted document. Subject to availability ."
          },
          "status": {
            "type": "string",
            "description": "Document status. Possible values - Active/Offline Verified/ Signed/ Expired/ Draft/ Reviewed/ Rejected/Approved/coordinatesSet. *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "coordinatePicker": {
            "type": "string",
            "description": "Coordinate picker status."
          },
          "deleted": {
            "type": "boolean",
            "description": "Document deleted status."
          },
          "creationDate": {
            "type": "string",
            "description": "Document creation date in the format DD-MM-YYYY HH:MM:SS. *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "completionDate": {
            "type": "string",
            "description": "Document completion date- When all the signers have completed their signatures  in the format DD-MM-YYYY HH:MM:S."
          },
          "scheduledDeletionDate": {
            "type": "string",
            "description": "Document scheduled deletion date in the format DD-MM-YYYY HH:MM:SS."
          },
          "customMessage": {
            "type": "string",
            "description": "Custom message configured - Invitation email/SMS."
          },
          "deleteOnComplete": {
            "type": "boolean",
            "description": "Delete on complete - Automatic deletion from Leegality servers after 7 days."
          },
          "requestSigningOrder": {
            "type": "boolean",
            "description": "Signing order status whether the signature links are activated sequentially or not."
          },
          "requireSigningOrder": {
            "type": "boolean",
            "description": "Signing order status whether the signing order is required or not."
          }
        }
      },
      "WorkflowDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Workflow ID through which the concerned document."
          },
          "name": {
            "type": "string",
            "description": "Workflow Name for the corresponding Workflow ID."
          },
          "type": {
            "type": "string",
            "description": "Workflow type- PDF or Template."
          },
          "subType": {
            "type": "string",
            "description": "Workflow sub type- single PDF or Multi PDF."
          }
        }
      },
      "TemplateDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Template ID *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "name": {
            "type": "string",
            "description": "Template name."
          }
        }
      },
      "AccountDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account ID generated by Leegality *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "name": {
            "type": "string",
            "description": "Account organization name configured by Leegality *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "label": {
            "type": "string",
            "description": "Department name configured in the Leegality dashboard *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "brandName": {
            "type": "string",
            "description": "Brand name configured in the Leegality dashboard *This response maybe sent in case of a deleted document. Subject to availability."
          }
        }
      },
      "SenderDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Sender name. *This response maybe sent in case of a deleted document. Subject to availability."
          },
          "username": {
            "type": "string",
            "description": "Sender username- Email/Phone number. *This response maybe sent in case of a deleted document. Subject to availability."
          }
        }
      },
      "StampDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Name of the Stamp group."
          },
          "groupNumber": {
            "type": "string",
            "description": "Number of the stamp group"
          },
          "stampValue": {
            "type": "string",
            "description": "Stamp value configred for this document."
          },
          "maximumValuePermitted": {
            "type": "string",
            "description": "Maximum value permitted for this stamp group"
          },
          "state": {
            "type": "string",
            "description": "Stamp group - State"
          },
          "stamps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StampArray3_1ResponseObject"
            }
          }
        }
      },
      "SeriesList3_1ApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/SeriesList3_1ApiResponse_data"
          }
        }
      },
      "SeriesArray3_1ResponseObject": {
        "type": "object",
        "properties": {
          "seriesNumber": {
            "type": "string",
            "description": "Unique series number"
          },
          "state": {
            "type": "string",
            "description": "State to which the stamp papers belong."
          },
          "denomination": {
            "type": "integer",
            "description": "Denomination of stamp in the series."
          },
          "firstPartyName": {
            "type": "string",
            "description": "Name of first party."
          },
          "secondPartyName": {
            "type": "string",
            "description": "Name of second party."
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of stamp."
          },
          "legend": {
            "type": "string",
            "description": "Legend to be printed on the physical stamp paper."
          },
          "underProcess": {
            "type": "integer",
            "description": "Number of stamps under process."
          },
          "blocked": {
            "type": "integer",
            "description": "Number of stamps blocked."
          },
          "reserved": {
            "type": "integer",
            "description": "Number of stamps reserved."
          },
          "unused": {
            "type": "integer",
            "description": "Number of stamps available for use."
          },
          "used": {
            "type": "integer",
            "description": "Number of stamps already used."
          },
          "expired": {
            "type": "integer",
            "description": "Number of stamps already expired."
          },
          "total": {
            "type": "integer",
            "description": "Total number of stamps."
          }
        }
      },
      "SeriesExpiry3_1ApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/SeriesExpiry3_1ApiResponse_data"
          }
        }
      },
      "SeriesExpiryArray3_1ResponseObject": {
        "type": "object",
        "properties": {
          "seriesNumber": {
            "type": "string",
            "description": "Unique series number"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry Date of the stamp papers."
          },
          "purchaseDate": {
            "type": "string",
            "description": "Purchase date of the stamp."
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of stamp in the series."
          }
        }
      },
      "NeslDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Transaction Id received durinf NESL transaction."
          },
          "loanDetails": {
            "$ref": "#/components/schemas/NeslLoanDetails3_1ResponseObject"
          },
          "securityDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NeslSecurityDetails3_1ResponseObject"
            }
          },
          "stampDetails": {
            "$ref": "#/components/schemas/NeslStampDetails3_1ResponseObject"
          }
        }
      },
      "CoordinatePickerDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "coordinatePickerUrl": {
            "type": "string",
            "description": "The URL for setting eSign coordinates."
          },
          "coordinatePickerWebhook": {
            "type": "string",
            "description": "The webhook URL on which a response will be sent when eSign coordinates are set."
          }
        }
      },
      "NeslLoanDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "loanNumber": {
            "type": "string",
            "description": "The loan number associated with the debt."
          },
          "sanctionNumber": {
            "type": "string",
            "description": "The sanction number associated with the debt."
          },
          "registrationType": {
            "type": "string",
            "description": "Type of debt (Individual Loan or Non-Individual Loan)."
          },
          "state": {
            "type": "string",
            "description": "The state in which stamp duty is being paid."
          },
          "branchName": {
            "type": "string",
            "description": "The name of the branch granting the loan."
          },
          "branchAddress": {
            "type": "string",
            "description": "The address of the branch granting the loan."
          },
          "dateOfSanction": {
            "type": "string",
            "description": "The date on which the loan was sanctioned as per the lender's CBS."
          },
          "emiAmount": {
            "type": "string",
            "description": "Interest installment amount payable on the loan."
          },
          "rateOfInterest": {
            "type": "string",
            "description": "Rate of Interest on the loan."
          },
          "sanctionAmount": {
            "type": "string",
            "description": "The amount sanctioned by the financial creditor."
          },
          "tenure": {
            "type": "string",
            "description": "The tenure of the loan."
          },
          "typeOfDebt": {
            "type": "string",
            "description": "The type of loan (financial debt or operational debt)."
          },
          "accountClosedFlag": {
            "type": "string",
            "description": "Whether the account is closed (yes, no, or assigned debt)."
          },
          "fundType": {
            "type": "string",
            "description": "Whether the credit facility is funded or non funded."
          },
          "sanctionCurrency": {
            "type": "string",
            "description": "The currency in which the loan is denominated (INR or USD)."
          },
          "creditSubtype": {
            "type": "string",
            "description": "Whether the financial debt is created pursuant to a credit facility or the purchase of a property."
          },
          "facilityName": {
            "type": "string",
            "description": "The name of the loan facility."
          },
          "amountOverdue": {
            "type": "string",
            "description": "The amount overdue on the loan."
          },
          "otherChargeAmount": {
            "type": "string",
            "description": "Any other charges (if applicable)."
          },
          "debtStartDate": {
            "type": "string",
            "description": "The date on which the financial debt started."
          },
          "interestAmount": {
            "type": "string",
            "description": "The amount of interest."
          },
          "oldDebtRefNo": {
            "type": "string",
            "description": "The old debt reference number (applicable in case there is a change in the debt reference number)."
          },
          "principalOutstanding": {
            "type": "string",
            "description": "The outstanding principal amount."
          },
          "loanRemark": {
            "type": "string",
            "description": "Loan remarks (if any)."
          },
          "totalOutstandingAmount": {
            "type": "string",
            "description": "Total outstanding amount."
          },
          "creditorBusinessUnit": {
            "type": "string",
            "description": "The business unit of the creditor providing the debt (such as SME, Retail etc)."
          },
          "drawingPower": {
            "type": "string",
            "description": "The drawing power of the loan."
          },
          "daysPastDue": {
            "type": "string",
            "description": "The number of days past due date."
          }
        }
      },
      "NeslSecurityDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "securityDescription": {
            "type": "string",
            "description": "Description of security."
          },
          "assetsType": {
            "type": "string",
            "description": "Type of asset forming security (Movable, Immovable, Intangible, Not Classified)."
          },
          "chargeType": {
            "type": "string",
            "description": "Type of charge created (Mortgage, Hypothecation, Charge, Assignment, Pledge, Lien, Negative Lien, Guarantee, Others, Not Classified)."
          },
          "assetId": {
            "type": "string",
            "description": "Asset ID of the Security (used internally by the lender)."
          },
          "doc": {
            "type": "string",
            "description": "Date of creation of security."
          },
          "dov": {
            "type": "string",
            "description": "Date of valuation of security."
          },
          "cersaiId": {
            "type": "string",
            "description": "CERSAI ID of security created."
          },
          "rocChargeId": {
            "type": "string",
            "description": "ROC ID for security created."
          },
          "securityValue": {
            "type": "string",
            "description": "Value of security."
          }
        }
      },
      "NeslStampDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "firstParty": {
            "type": "string",
            "description": "The name of the first party (for the stamp paper)."
          },
          "secondParty": {
            "type": "string",
            "description": "The name of the second party (for the stamp paper)."
          },
          "stampDutyAmount": {
            "type": "string",
            "description": "The stamp duty amount."
          },
          "considerationPrice": {
            "type": "string",
            "description": "The consideration price for the purposes of stamp duty."
          },
          "descriptionOfDocument": {
            "type": "string",
            "description": "The description of the document for the purposes of stamp duty."
          },
          "stampDutyPaidBy": {
            "type": "string",
            "description": "The name of the party paying the stamp duty."
          },
          "articleCode": {
            "type": "string",
            "description": "Article code for payment of stamp duty."
          },
          "FirstPartyPin:": {
            "type": "string",
            "description": "Article code for payment of stamp duty."
          },
          "secondPartyPin:": {
            "type": "string",
            "description": "Article code for payment of stamp duty."
          }
        }
      },
      "InvitationsArray3_1ResponseObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of signer."
          },
          "email": {
            "type": "string",
            "description": "Email of signer."
          },
          "phone": {
            "type": "string",
            "description": "Phone of signer."
          },
          "inviteeType": {
            "type": "string",
            "description": "Type of invitee - Signer/Reviewer/CC/Coordinate Picker."
          },
          "inviteeConfigs": {
            "$ref": "#/components/schemas/InviteeConfigDetails3_1ResponseObject"
          },
          "recordReviewerDetails": {
            "type": "boolean",
            "description": "Reviewer details to be captured in the audit trail."
          },
          "inviteeGroup": {
            "$ref": "#/components/schemas/InviteeGroupDetails3_1ResponseObject"
          },
          "invitationUrl": {
            "type": "string",
            "description": "Signing URL(s) generated on a successful create request."
          },
          "allowedSignatures": {
            "type": "array",
            "description": "Allowed signature types for the signers i.e. Aadhaar/ Virtual/ DSC Token/ NeSL/Offline Sign/ Doc Signer.",
            "items": {
              "type": "string"
            }
          },
          "usedSignatureType": {
            "type": "string",
            "description": "Signature type used for a signed invitation(s)."
          },
          "signatureOptions": {
            "$ref": "#/components/schemas/InviteeSignatureOptionDetails3_1ResponseObject"
          },
          "signatureOptionUsed": {
            "type": "string",
            "description": "Signature option used under the signature type used e.g.OTP/ Bio-Metric/ Iris in case of Aadhaar Sign & Draw/  Computer generated in case of Virtual Sign."
          },
          "neslInvitationDetails": {
            "$ref": "#/components/schemas/InviteeNESLParticipantDetails3_1ResponseObject"
          },
          "offlineSignDetails": {
            "$ref": "#/components/schemas/InviteeOfflineSignDetails3_1ResponseObject"
          },
          "invitationStatus": {
            "$ref": "#/components/schemas/InviteeStatusDetails3_1ResponseObject"
          },
          "certificateData": {
            "$ref": "#/components/schemas/InviteeCertificateDetails3_1ResponseObject"
          },
          "verificationRequest": {
            "$ref": "#/components/schemas/InviteeVerificationRequestDetails3_1ResponseObject"
          },
          "verificationResponse": {
            "$ref": "#/components/schemas/InvitationsArray3_1ResponseObject_verificationResponse"
          },
          "supportingDocuments": {
            "type": "array",
            "description": "You will receive this parameter only if you enable using the attachment key while making API call. This attachments parameter contains all the attachments uploaded by the Invitee in the signing journey.",
            "items": {
              "$ref": "#/components/schemas/AttachmentsArrayResponseObject"
            }
          }
        }
      },
      "InviteeConfigDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "emailNotification": {
            "type": "boolean",
            "description": "Email notification."
          },
          "phoneNotification": {
            "type": "boolean",
            "description": "Phone notification."
          },
          "retry": {
            "type": "integer",
            "description": "Number of retry attempts configured (only for aadhaar eSign)."
          },
          "fixedName": {
            "type": "boolean",
            "description": "Invitee will be able to edit the name in the signing journey."
          },
          "noName": {
            "type": "boolean",
            "description": "Invitee name will not appear in the signature appearance ."
          },
          "supportingDocument": {
            "type": "string",
            "description": "Name(s) supporting document(s) requested."
          },
          "organizationConfig": {
            "$ref": "#/components/schemas/InviteeOrganisationConfigDetails3_1ArrayResponseObject"
          },
          "security": {
            "$ref": "#/components/schemas/InviteeSecurityDetails3_1ArrayResponseObject"
          },
          "customURL": {
            "$ref": "#/components/schemas/InviteeCustomURLDetails3_1ArrayResponseObject"
          },
          "customConsent": {
            "type": "string",
            "description": "Custome consent content (if any)."
          }
        }
      },
      "InviteeOrganisationConfigDetails3_1ArrayResponseObject": {
        "type": "object",
        "properties": {
          "nameRequired": {
            "type": "boolean",
            "description": "Name of the organization configured (appears on the rubber seal and signature appearance) - This will be in case \"fixedName\" parameter is passed as true."
          },
          "fixedName": {
            "type": "boolean",
            "description": "Invitee will not be able to edit the organization name set previously - True/False."
          },
          "name": {
            "type": "string",
            "description": "If fixedName is passed as false and the invitee has to input the organization name in the signing journey."
          },
          "requireSeal": {
            "type": "boolean",
            "description": "Whether a seal is required or not."
          },
          "sealType": {
            "type": "string",
            "description": "Seal type configured for the invitee i.e. Authorized signatory seal/ Director Seal/ Custom Seal."
          }
        }
      },
      "InviteeSecurityDetails3_1ArrayResponseObject": {
        "type": "object",
        "properties": {
          "enforceAuthentication": {
            "type": "boolean",
            "description": "OTP verification before document access."
          },
          "twoFactorAuthentication": {
            "type": "boolean",
            "description": "2 factor authentication (Email & Phone number)."
          },
          "sendDocumentRawUrl": {
            "type": "boolean",
            "description": "Raw document pdf URL sent with OTP emails/SMS's."
          },
          "captureLocation": {
            "type": "boolean",
            "description": "Geo location capture."
          },
          "capturePhoto": {
            "type": "boolean",
            "description": "Face capture."
          },
          "userLiveliness": {
            "type": "boolean",
            "description": "User liveliness (Live OTP verification)."
          }
        }
      },
      "InviteeCustomURLDetails3_1ArrayResponseObject": {
        "type": "object",
        "properties": {
          "webhookURL": {
            "type": "string",
            "description": "If provided, we will make POST calls to this URL after successful signing by the signer with the data as described in webhookData model below."
          },
          "redirectURL": {
            "type": "string",
            "description": "URL where you want the user to be redirected on completion of the transaction (Not applicable if you are using our Front-end SDKs). documentId will be appended to the URL on redirection."
          },
          "errorWebhookURL": {
            "type": "string",
            "description": "If provided, we will make POST calls to this URL after expiry or failure of the signature for the user as per the data described in errorWebhook data"
          },
          "baseURL": {
            "type": "string",
            "description": "URL where you want the user to be redirected on rejection/failure of the transaction (Not applicable if you are using our Front-end SDKs). documentId will be appended to the URL on redirection."
          },
          "webhookVersion": {
            "type": "string",
            "description": "If provided, we will make call to specific version of webhook data."
          }
        }
      },
      "InviteeGroupDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invitee group id."
          },
          "name": {
            "type": "string",
            "description": "Invitee group name"
          },
          "completionThreshold": {
            "type": "string",
            "description": "Completion threshold - Number of people required to sign in the group for the group signature to be completed."
          },
          "completionStatus": {
            "type": "string",
            "description": "Completion status of the group invitee."
          },
          "size": {
            "type": "integer",
            "description": "Number of invitations in the group."
          },
          "completed": {
            "type": "boolean",
            "description": "If the group signatue is completed."
          }
        }
      },
      "InviteeSignatureOptionDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "aadhaar": {
            "type": "array",
            "description": "Aadhaar authentication(s) configured - OTP/ Bio-metric/ Iris.",
            "items": {
              "type": "string"
            }
          },
          "virtual": {
            "type": "array",
            "description": "Type of virtual sign configured - Draw/ Computer generated.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InviteeNESLParticipantDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Nesl Participant type. Possible values are F2F and Non F2F.  In case of F2F, the invitee will receive a mail/SMS from Leegality with the signURL. In case of Non F2F the signURL will be sent directly by NeSL."
          },
          "participantDetails": {
            "$ref": "#/components/schemas/NeslparticipantDetails3_1ResponseObject"
          }
        }
      },
      "NeslparticipantDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name of the Party."
          },
          "contactPersonName": {
            "type": "string",
            "description": "Full name of the contact person of the Party."
          },
          "contactRelation": {
            "type": "string",
            "description": "Relation of the party to the debt (Debtor, Guarantor, Co-obligant)."
          },
          "emailId": {
            "type": "string",
            "description": "Email ID of the signer."
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile Number of the signer."
          },
          "dob": {
            "type": "string",
            "description": "Date of Birth/Incorporation."
          },
          "legalConstitution": {
            "type": "string",
            "description": "Legal constitution of the signer (Resident Individual, Private Limited, Public Limited, LLP, Proprietorship, Partnership, Entity created by Statute, Trust, HUF, Coop Society, Association of Persons, Government, Self Help Groups, Non-Resident, Foreign Company)."
          },
          "alternateEmailId": {
            "type": "string",
            "description": "Alternate email ID of the signer."
          },
          "alternateMobileNumber": {
            "type": "string",
            "description": "Alternate mobile of the signer."
          },
          "officialDocType": {
            "type": "string",
            "description": "Official Document Type (Pan Card, Driving License, Voter ID, Passport, Others)."
          },
          "officialDocId": {
            "type": "string",
            "description": "Official Document ID."
          },
          "registeredAddress": {
            "type": "string",
            "description": "Registered address of the signer."
          },
          "registeredPinCode": {
            "type": "string",
            "description": "PIN code of the registered address of the signer."
          },
          "designation": {
            "type": "string",
            "description": "Designation of the signer (relevant in case of corporate entities)."
          },
          "communicationAddress": {
            "type": "string",
            "description": "Communication address of the signer."
          },
          "communicationAddressPinCode": {
            "type": "string",
            "description": "PIN code of the communication address of the signer."
          },
          "cin": {
            "type": "string",
            "description": "Corporate Identification Number (relevant in case of corporate entities)."
          },
          "kin": {
            "type": "string",
            "description": "KYC Identification Number of signer."
          },
          "partyType": {
            "type": "string",
            "description": "Type of Party (Indian entity/ Resident Individual/ Foreign Entity/ NRI/Foreign Individual."
          }
        }
      },
      "InviteeOfflineSignDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "fixSignerId": {
            "type": "boolean",
            "description": "Parameter to find out if signerID is fixed for the invitation."
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile number corresponding to the signerID fixed for the invitation."
          },
          "pan": {
            "type": "string",
            "description": "PAN corresponding to the signerID fixed for the invitation."
          },
          "signerId": {
            "type": "string",
            "description": "SignerID corresponding to the signerID fixed for the invitation."
          }
        }
      },
      "InviteeStatusDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "The invitation is active and no action has been taken."
          },
          "signed": {
            "type": "boolean",
            "description": "The invitation has been signed successfuly."
          },
          "reviewed": {
            "type": "boolean",
            "description": "Only for reviewer invite type - The invitation has been reviewed by the reviewed i.e. Either Approved or rejected In case a document is rejected - The reviewed status for the same will be true and the approved status will be falser."
          },
          "approved": {
            "type": "boolean",
            "description": "Only for reviewer invite type - The invitation has been approved."
          },
          "rejected": {
            "type": "boolean",
            "description": "Only for signer invite type - The invitation has been rejected."
          },
          "expired": {
            "type": "boolean",
            "description": "The invitation has expired - the invitee will no longer be able to access the URL."
          },
          "recordApproverResponse": {
            "type": "boolean",
            "description": "Parameter to find out if the reviewer’s actions are recorded in audit trail."
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date of the signing invite - DD-MM-YYYY HH:MM:SS."
          },
          "expiryDate": {
            "type": "integer",
            "description": "Expiry date of the signing invite - DD-MM-YYYY HH:MM:SS."
          },
          "signDate": {
            "type": "string",
            "description": "Signing date of the signing invite - DD-MM-YYYY HH:MM:SS."
          },
          "failureReason": {
            "type": "string",
            "description": "Reason for failure of a sign invite. This includes the message sent by the invitee at the time of rejection of the invitation."
          },
          "rejectionMessage": {
            "type": "string",
            "description": "The message sent by the invitee at the time of rejection the invitation."
          }
        }
      },
      "InviteeCertificateDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the signer as set out in the digital signature certificate (if available)."
          },
          "yob": {
            "type": "string",
            "description": "The year of birth of the signer as set out in the digital signature certificate (if available)."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the signer as set out in the digital signature certificate (if available)."
          },
          "pincode": {
            "type": "string",
            "description": "The PIN code of the signer as set out in the digital signature certificate (if available)."
          },
          "title": {
            "type": "string",
            "description": "The last 4 digits of the Aadhar Number of the signer as set out in the digital signature certificate (if available)."
          },
          "state": {
            "type": "string",
            "description": "The state of the signer as set out in the digital signature certificate (if available)."
          }
        }
      },
      "InviteeVerificationRequestDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "aadhaarConfig": {
            "$ref": "#/components/schemas/InviteeAadhaarVerificationRequestDetails3_1ResponseObject"
          },
          "offlineConfig": {
            "$ref": "#/components/schemas/InviteeAadhaarVerificationRequestDetails3_1ResponseObject"
          },
          "dscConfig": {
            "$ref": "#/components/schemas/InviteeDSCVerificationRequestDetails3_1ResponseObject"
          },
          "neslConfig": {
            "$ref": "#/components/schemas/InviteeAadhaarVerificationRequestDetails3_1ResponseObject"
          }
        }
      },
      "InviteeAadhaarVerificationRequestDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "smartNamePercentage": {
            "type": "boolean",
            "description": "Whether amart name verification is turned on or not."
          },
          "nameVerification": {
            "type": "boolean",
            "description": "Whether name verification is turned on or not."
          },
          "pincodeVerification": {
            "type": "boolean",
            "description": "Whether pincode verification is turned on or not."
          },
          "stateVerification": {
            "type": "boolean",
            "description": "Whether state verification is turned on or not."
          },
          "titleVerification": {
            "type": "boolean",
            "description": "Whether title (Last 4 digits of the aadhaar number) verification is turned on or not."
          },
          "yobVerification": {
            "type": "boolean",
            "description": "Whether YOB (Year of birth) verification is turned on or not."
          },
          "genderVerification": {
            "type": "boolean",
            "description": "Whether gender verification is turned on or not."
          }
        }
      },
      "InviteeDSCVerificationRequestDetails3_1ResponseObject": {
        "type": "object",
        "properties": {
          "smartNamePercentage": {
            "type": "boolean",
            "description": "Whether amart name verification is turned on or not."
          },
          "nameVerification": {
            "type": "boolean",
            "description": "Whether name verification is turned on or not."
          },
          "pincodeVerification": {
            "type": "boolean",
            "description": "Whether pincode verification is turned on or not."
          },
          "stateVerification": {
            "type": "boolean",
            "description": "Whether state verification is turned on or not."
          }
        }
      },
      "StampArray3_1ResponseObject": {
        "type": "object",
        "properties": {
          "series": {
            "type": "string",
            "description": "Series number(s)."
          },
          "amount": {
            "type": "integer",
            "description": "Denomination(s)."
          },
          "serialNumber": {
            "type": "string",
            "description": "Stamp serial number(s) for the stamp papers attached This is the serial number that is affixed on the stamp paper by the issuing authority"
          },
          "associatedDocumentId": {
            "type": "string",
            "description": "Document ID(s) associated with the stamp paper(s) This is the document ID that is physically printed on the stamp paper."
          }
        }
      },
      "FolderArrayResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Folder ID, if you are saving document in any folders."
          },
          "name": {
            "type": "string",
            "description": "Folder Name, if you are saving document in any folder."
          }
        }
      },
      "CCArrayResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the CC."
          },
          "name": {
            "type": "string",
            "description": "The name of the CC."
          },
          "email": {
            "type": "string",
            "description": "The email of the CC."
          },
          "invitationNotification": {
            "type": "string",
            "description": "Parameter to find out if invitation notifications have been enabled for the CC."
          },
          "signingNotification": {
            "type": "string",
            "description": "Parameter to find out if signing notifications have been enabled for the CC."
          },
          "completionNotification": {
            "type": "string",
            "description": "Parameter to find out if completion notifications have been enabled for the CC."
          },
          "failureNotification": {
            "type": "string",
            "description": "Parameter to find out if failure notifications have been enabled for the CC."
          },
          "sendInvitationUrl": {
            "type": "string",
            "description": "Parameter to find out if invitation URLs will be shared with the CC."
          },
          "shareDocAuditTrail": {
            "type": "string",
            "description": "Parameter to find out if audit trail will be shared with the CC."
          },
          "enforceOneFactorAuthentication": {
            "type": "string",
            "description": "Parameter to find out if one factor authentication are enabled for the CC."
          },
          "recordAuditTrail": {
            "type": "string",
            "description": "Parameter to find out if CC notifications are recorded in the audit trail."
          }
        }
      },
      "StampArrayResponseObject": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Stamp state name, if you are using stamp papers."
          },
          "amount": {
            "type": "string",
            "description": "Stamp amount, if you are using stamp papers."
          },
          "serialNumber": {
            "type": "string",
            "description": "Stamp serial number, if you are using stamp papers."
          }
        }
      },
      "AttachmentsArrayResponseObject": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Base64 encoded attachment file."
          },
          "name": {
            "type": "string",
            "description": "Document name."
          },
          "type": {
            "type": "string",
            "description": "Document type, Possible values= application/pdf, image/png, image/jpg, image/jpeg."
          }
        }
      },
      "InvitationsArrayResponseObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of signer."
          },
          "email": {
            "type": "string",
            "description": "Email of signer."
          },
          "phone": {
            "type": "string",
            "description": "Phone of signer."
          },
          "signUrl": {
            "type": "string",
            "description": "Unique sign invitation URL generated by leegality for each signer."
          },
          "active": {
            "type": "boolean",
            "description": "Activation status of invitation, Possible values true or false."
          },
          "signed": {
            "type": "boolean",
            "description": "Signing status of invitation, Possible values true or false."
          },
          "rejected": {
            "type": "boolean",
            "description": "Rejection status of invitation, Possible values true or false."
          },
          "expired": {
            "type": "boolean",
            "description": "Expiry status of invitations, Possible values true or false."
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date of sign invitation in format DD-MM-YYYY HH:MM:SS."
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of sign invitation in format DD-MM-YYYY HH:MM:SS."
          },
          "signDate": {
            "type": "string",
            "description": "Sign date of sign invitation in format DD-MM-YYYY HH:MM:SS, You will receive value of this parameter if invitation is signed otherwise you will receive value as NULL."
          },
          "signType": {
            "type": "string",
            "description": "You will receive the value if the user has already signed the document. Possible value= AADHAAR, VIRTUAL_SIGN, DSC, NESL_ESIGN and OFFLINE_SIGN , DOC_SIGNER, AUTOMATED_SIGN. The value OFFLINE_SIGN refers to Cloud DSC."
          },
          "failureReason": {
            "type": "string",
            "description": "You will receive this parameter only if you enable it using request parameter failureReason. You will receive appropriate message of failure of this sign invitation."
          },
          "verificationResponse": {
            "$ref": "#/components/schemas/InvitationsArray3_1ResponseObject_verificationResponse"
          },
          "attachments": {
            "type": "array",
            "description": "You will receive this parameter only if you enable using the attachment key while making API call. This attachments parameter contains all the attachments uploaded by the Invitee in the signing journey.",
            "items": {
              "$ref": "#/components/schemas/AttachmentsArrayResponseObject"
            }
          }
        }
      },
      "DocumentCompletedApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/DocumentCompletedApiResponse_data"
          }
        }
      },
      "DocumentCompletedResponseObject": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "Document ID generated by leegality."
          },
          "documentName": {
            "type": "string",
            "description": "Document name provided by client."
          },
          "irn": {
            "type": "string",
            "description": "Internal reference number provided by client."
          },
          "folderId": {
            "type": "string",
            "description": "Folder ID of the folder in which document is lying. Null in case document is not inside any folder."
          },
          "folderName": {
            "type": "string",
            "description": "Folder Name of the folder in which document is lying. Null in case document is not inside any folder."
          },
          "dateCreated": {
            "type": "string",
            "description": "Creation date of the document."
          },
          "completionDate": {
            "type": "string",
            "description": "Completion date of the document."
          }
        }
      },
      "SeriesListApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/SeriesListApiResponse_data"
          }
        }
      },
      "SeriesArrayResponseObject": {
        "type": "object",
        "properties": {
          "blocked": {
            "type": "integer",
            "description": "Number of stamps blocked."
          },
          "denomination": {
            "type": "integer",
            "description": "Denomination of stamp in the series."
          },
          "firstPartyName": {
            "type": "string",
            "description": "Name of first party."
          },
          "legend": {
            "type": "string",
            "description": "Legend to be printed on the physical stamp paper."
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of stamp."
          },
          "reserved": {
            "type": "integer",
            "description": "Number of stamps reserved."
          },
          "secondPartyName": {
            "type": "string",
            "description": "Name of second party."
          },
          "seriesNumber": {
            "type": "string",
            "description": "Unique series number"
          },
          "state": {
            "type": "string",
            "description": "State to which the stamp papers belong."
          },
          "total": {
            "type": "integer",
            "description": "Total number of stamps."
          },
          "underProcess": {
            "type": "integer",
            "description": "Number of stamps under process."
          },
          "unused": {
            "type": "integer",
            "description": "Number of stamps available for use."
          },
          "used": {
            "type": "integer",
            "description": "Number of stamps already used."
          }
        }
      },
      "SeriesGroupApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/SeriesGroupApiResponse_data"
          }
        }
      },
      "SeriesGroupArrayResponseObject": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Name of series group."
          },
          "groupNumber": {
            "type": "string",
            "description": "Unique series group number."
          },
          "maximumValuePermitted": {
            "type": "string",
            "description": "Maximum value of the denomination for which a combination of stamp can be applied."
          },
          "series": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesValueArrayResponseObject"
            }
          },
          "state": {
            "type": "string",
            "description": "Name of the state of series group."
          }
        }
      },
      "SeriesValueArrayResponseObject": {
        "type": "object",
        "properties": {
          "denomination": {
            "type": "string",
            "description": "Denomination of stamp of this series."
          },
          "seriesNumber": {
            "type": "string",
            "description": "Unique series number of the series."
          }
        }
      },
      "WalletBalanceDetailsApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/WalletBalanceDetailsApiResponse_data"
          }
        }
      },
      "WalletBalanceListApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/WalletBalanceListApiResponse_data"
          }
        }
      },
      "WalletBalanceListApiResponseObject": {
        "type": "object",
        "properties": {
          "consumed": {
            "type": "integer",
            "description": "Consumed eSign Credits."
          },
          "expired": {
            "type": "integer",
            "description": "Expired eSign Credits."
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of these eSign Credits."
          },
          "purchaseDate": {
            "type": "string",
            "description": "Purchase Date of eSign Credits."
          },
          "purchaseQuantity": {
            "type": "integer",
            "description": "Purchase Quantity of eSign Credits."
          },
          "unused": {
            "type": "integer",
            "description": "Unused eSign Credits."
          }
        }
      },
      "ResendApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/ResendApiResponse_data"
          }
        }
      },
      "ResendInvitationApiResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "name": {
            "type": "string",
            "description": "Name of the invitee."
          },
          "email": {
            "type": "string",
            "description": "Email of the invitee."
          },
          "phone": {
            "type": "string",
            "description": "Phone Number of the invitee."
          },
          "signUrl": {
            "type": "string",
            "description": "Invitee specfic URL unique to the request."
          },
          "message": {
            "type": "string",
            "description": "Status message for the resend notification."
          }
        }
      },
      "DetailsApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/DetailsApiResponse_data"
          }
        }
      },
      "ListApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "data": {
            "$ref": "#/components/schemas/ListApiResponse_data"
          }
        }
      },
      "DeleteApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "if success then 1, else 0."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the invitee."
          },
          "email": {
            "type": "string",
            "description": "Email of the invitee."
          },
          "phone": {
            "type": "string",
            "description": "Phone Number of the invitee."
          },
          "signUrl": {
            "type": "string",
            "description": "Invitee specfic URL unique to the request."
          },
          "active": {
            "type": "boolean",
            "description": "Status of the URL."
          },
          "expiryDate": {
            "type": "string",
            "description": "Request expiration date. Format: Date"
          }
        }
      },
      "InviteeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the invitee."
          },
          "email": {
            "type": "string",
            "description": "Email of the invitee."
          },
          "phone": {
            "type": "string",
            "description": "Phone Number of the invitee."
          },
          "signUrl": {
            "type": "string",
            "description": "User specfic URL unique to the request."
          },
          "active": {
            "type": "boolean",
            "description": "Status of the URL."
          },
          "signed": {
            "type": "boolean",
            "description": "Request eSigning status."
          },
          "rejected": {
            "type": "boolean",
            "description": "Request rejection status."
          },
          "expired": {
            "type": "boolean",
            "description": "Request expiration status."
          },
          "expiryDate": {
            "type": "string",
            "description": "Request expiration date. Format (dd-MM-yyyy HH:mm:ss)"
          },
          "signType": {
            "type": "string",
            "description": "This parameter will be there only for Webhook when the document has been signed. Possible values are- AADHAAR, VIRTUAL_SIGN, DSC, DOC_SIGNER, NESL_ESIGN, OFFLINE_SIGN, AUTOMATED_SIGN. The value OFFLINE_SIGN refers to Cloud DSC."
          }
        }
      },
      "ReactivateResponseInvitation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the invitee."
          },
          "email": {
            "type": "string",
            "description": "Email of the invitee."
          },
          "phone": {
            "type": "string",
            "description": "Phone Number of the invitee."
          },
          "signUrl": {
            "type": "string",
            "description": "User specfic URL unique to the request."
          },
          "active": {
            "type": "boolean",
            "description": "Status of the URL."
          },
          "signed": {
            "type": "boolean",
            "description": "Request eSigning status."
          },
          "rejected": {
            "type": "boolean",
            "description": "Request rejection status."
          },
          "expired": {
            "type": "boolean",
            "description": "Request expiration status."
          },
          "expiryDate": {
            "type": "string",
            "description": "Request expiration date. Format (dd-MM-yyyy HH:mm:ss)"
          },
          "signType": {
            "type": "string",
            "description": "This parameter will be there when the document has been signed. Possible values are- AADHAAR, VIRTUAL_SIGN, DSC, DOC_SIGNER, OFFLINE_SIGN, AUTOMATED_SIGN. The value OFFLINE_SIGN refers to Cloud DSC."
          }
        }
      },
      "Signer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of signer as contained in the Digital Signature Certificate in case of Aadhaar, DSC, NESL_ESIGN, OFFLINE_SIGN, Doc Signer and Automated Signer. In case of Virtual Sign and Automated Virtual Sign, the name will be the name used for eSigning the document."
          },
          "pincode": {
            "type": "string",
            "description": "PIN Code of signer as contained in the Digital Signature Certificate in case of Aadhaar, DSC, NESL_ESIGN, OFFLINE_SIGN, Doc Signer and Automated Signer. Value will be provided only if available in the certificate."
          },
          "state": {
            "type": "string",
            "description": "State of signer as contained in the Digital Signature Certificate in case of Aadhaar, DSC, NESL_ESIGN, OFFLINE_SIGN, Doc Signer and Automated Signer. Value will be provided only if available in the certificate."
          },
          "title": {
            "type": "string",
            "description": "Last 4 digit of the unique identifier of signer as contained in the Digital Signature Certificate issued after Aadhaar authentication. Only works for Aadhaar eSign, NESL_ESIGN and OFFLINE_SIGN (for accounts created with Aadhaar XML). Value will be provided only if available in the Certificate."
          }
        }
      },
      "ListData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the document."
          },
          "documentId": {
            "type": "string",
            "description": "Document ID."
          },
          "irn": {
            "type": "string",
            "description": "Internal Reference Number."
          },
          "folderId": {
            "type": "string",
            "description": "Folder ID."
          },
          "folderName": {
            "type": "string",
            "description": "Folder Name."
          },
          "status": {
            "type": "string",
            "description": "Document Status. Possible values- DRAFT, SENT, RECEIVED, SIGNED, COMPLETED, EXPIRED."
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Message Code."
          },
          "message": {
            "type": "string",
            "description": "Success/Error Message."
          }
        }
      },
      "RequestApiResponse_data": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "documentId is a unique Leegality ID created for every eSigning request."
          },
          "irn": {
            "type": "string",
            "description": "Internal Reference Number."
          },
          "invitees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Request"
            }
          }
        }
      },
      "ReactivateApiResponse_data": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "documentId is a unique Leegality ID created for every eSigning request."
          },
          "irn": {
            "type": "string",
            "description": "Internal Reference Number."
          },
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReactivateResponseInvitation"
            }
          }
        }
      },
      "DocumentDetailsApiResponse_data": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Base64 encoded PDF file, If you disable this parameter using file key while API call, You will receive value as null."
          },
          "auditTrail": {
            "type": "string",
            "description": "Base64 encoded digitally signed audit trail, You will receive value of this parameter only if document is completed and you        enable the same using auditTrail key while API call otherwise you will receive value as NULL."
          },
          "documentId": {
            "type": "string",
            "description": "Leegality generated unique Document ID."
          },
          "documentName": {
            "type": "string",
            "description": "Document name provided by client."
          },
          "workflowId": {
            "type": "string",
            "description": "Leegality generated unique    Workflow ID, if document generated from workflow."
          },
          "workflowName": {
            "type": "string",
            "description": "Workflow name provided by client, if document generated from workflow."
          },
          "irn": {
            "type": "string",
            "description": "Internal reference number provided by client."
          },
          "status": {
            "type": "string",
            "description": "Current status of the document, Possible values= DRAFT, SENT, COMPLETED, EXPIRED."
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date of Document in format DD-MM-YYYY HH:MM:SS."
          },
          "completionDate": {
            "type": "string",
            "description": "Completion date of Document in format DD-MM-YYYY HH:MM:SS, You will receive this value only if document is completed."
          },
          "deletionDate": {
            "type": "string",
            "description": "Deletion date of Document in format DD-MM-YYYY HH:MM:SS, If you are using deleteOnComplete functionality of Leegality."
          },
          "senderName": {
            "type": "string",
            "description": "Sender Full Name."
          },
          "senderUsername": {
            "type": "string",
            "description": "Sender Email/Phone."
          },
          "folders": {
            "type": "array",
            "description": "You will receive the whole hierarchy of folders created with leegality, in order of last child folder as first element of array and parent folders goes after child folder in the array.",
            "items": {
              "$ref": "#/components/schemas/FolderArrayResponseObject"
            }
          },
          "stamp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StampArrayResponseObject"
            }
          },
          "attachments": {
            "type": "array",
            "description": "You will receive this parameter only if you enable using the attachment key while making API call. This attachments parameter contains all the attachments uploaded by the Sender.",
            "items": {
              "$ref": "#/components/schemas/AttachmentsArrayResponseObject"
            }
          },
          "invitations": {
            "type": "array",
            "description": "This parameter contains the list of all the signers.",
            "items": {
              "$ref": "#/components/schemas/InvitationsArrayResponseObject"
            }
          }
        }
      },
      "DocumentDetails3_1ApiResponse_data": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Base64 encoded PDF file, If you disable this parameter using file key while API call, You will receive value as null."
          },
          "auditTrail": {
            "type": "string",
            "description": "Base64 encoded digitally signed audit trail, You will receive value of this parameter only if document is completed and you        enable the same using auditTrail key while API call otherwise you will receive value as NULL."
          },
          "document": {
            "$ref": "#/components/schemas/DocumentDetails3_1ResponseObject"
          },
          "workflow": {
            "$ref": "#/components/schemas/WorkflowDetails3_1ResponseObject"
          },
          "template": {
            "$ref": "#/components/schemas/TemplateDetails3_1ResponseObject"
          },
          "account": {
            "$ref": "#/components/schemas/AccountDetails3_1ResponseObject"
          },
          "sender": {
            "$ref": "#/components/schemas/SenderDetails3_1ResponseObject"
          },
          "folders": {
            "type": "array",
            "description": "You will receive the whole hierarchy of folders created with leegality, in order of last child folder as first element of array and parent folders goes after child folder in the array.",
            "items": {
              "$ref": "#/components/schemas/FolderArrayResponseObject"
            }
          },
          "stampDetails": {
            "$ref": "#/components/schemas/StampDetails3_1ResponseObject"
          },
          "referenceAttachments": {
            "type": "array",
            "description": "Attachments that are uploaded by the sender of the document visible during the signing journey.",
            "items": {
              "$ref": "#/components/schemas/AttachmentsArrayResponseObject"
            }
          },
          "neslDocumentDetails": {
            "$ref": "#/components/schemas/NeslDetails3_1ResponseObject"
          },
          "cc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CCArrayResponseObject"
            }
          },
          "coordinatePicker": {
            "$ref": "#/components/schemas/CoordinatePickerDetails3_1ResponseObject"
          },
          "invitations": {
            "type": "array",
            "description": "This parameter contains the list of all the signers.",
            "items": {
              "$ref": "#/components/schemas/InvitationsArray3_1ResponseObject"
            }
          }
        }
      },
      "SeriesList3_1ApiResponse_data": {
        "type": "object",
        "properties": {
          "seriesList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesArray3_1ResponseObject"
            }
          }
        }
      },
      "SeriesExpiry3_1ApiResponse_data": {
        "type": "object",
        "properties": {
          "seriesList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesExpiryArray3_1ResponseObject"
            }
          }
        }
      },
      "InvitationsArray3_1ResponseObject_verificationResponse": {
        "type": "object",
        "properties": {
          "smartNamePercentage": {
            "type": "integer",
            "description": "This will contain integer value of matching percentage with the provided name and response from CA authority."
          },
          "signatureVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          },
          "nameVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          },
          "pincodeVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          },
          "stateVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          },
          "titleVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          },
          "yobVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          },
          "genderVerification": {
            "type": "boolean",
            "description": "This will contain the value ‘true’, ‘false’ or ‘null’. If you have enabled this verification you will get response as null, if verification passed then ‘true’ otherwise ‘false’"
          }
        },
        "description": "You will receive this parameter only if you enable using the verificationResponse key while making API call. This verificationResponse parameter will contain the verification data"
      },
      "DocumentCompletedApiResponse_data": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentCompletedResponseObject"
            }
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of document as per the given filters"
          }
        }
      },
      "SeriesListApiResponse_data": {
        "type": "object",
        "properties": {
          "series": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesArrayResponseObject"
            }
          }
        }
      },
      "SeriesGroupApiResponse_data": {
        "type": "object",
        "properties": {
          "seriesGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesGroupArrayResponseObject"
            }
          }
        }
      },
      "WalletBalanceDetailsApiResponse_data": {
        "type": "object",
        "properties": {
          "expired": {
            "type": "integer",
            "description": "Expired eSign Credits."
          },
          "reserved": {
            "type": "integer",
            "description": "Reserved eSign Credits."
          },
          "unused": {
            "type": "integer",
            "description": "Available for use eSign Credits."
          },
          "consumed": {
            "type": "integer",
            "description": "Used eSign Credits."
          },
          "total": {
            "type": "integer",
            "description": "Total eSign Credits."
          }
        }
      },
      "WalletBalanceListApiResponse_data": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletBalanceListApiResponseObject"
            }
          }
        }
      },
      "ResendApiResponse_data": {
        "type": "object",
        "properties": {
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResendInvitationApiResponseObject"
            }
          }
        }
      },
      "DetailsApiResponse_data": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "Same as the documentId passed in GET call."
          },
          "irn": {
            "type": "string",
            "description": "Internal Reference Number."
          },
          "folderId": {
            "type": "string",
            "description": "Folder ID."
          },
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InviteeRequest"
            }
          },
          "files": {
            "type": "array",
            "description": "Base64 encoded string format of latest version of the document.",
            "items": {
              "type": "string"
            }
          },
          "auditTrail": {
            "type": "string",
            "description": "Base64 encoded string format of the Audit Trail generated on completion of the document."
          },
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Signer"
            }
          }
        }
      },
      "ListApiResponse_data": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Count of total number of available documents."
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListData"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "X-Auth-Token": {
        "type": "apiKey",
        "name": "X-Auth-Token",
        "in": "header"
      }
    }
  }
}
